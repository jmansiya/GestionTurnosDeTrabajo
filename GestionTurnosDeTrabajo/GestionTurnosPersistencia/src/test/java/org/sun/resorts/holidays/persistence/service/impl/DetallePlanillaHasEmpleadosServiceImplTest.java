/*
 * Created on 31 oct 2015 ( Time 10:51:33 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.DetallePlanillaHasEmpleados;
import org.sun.resorts.holidays.model.jpa.DetallePlanillaHasEmpleadosEntity;
import org.sun.resorts.holidays.model.jpa.DetallePlanillaHasEmpleadosEntityKey;
import org.sun.resorts.holidays.persistence.service.mapping.DetallePlanillaHasEmpleadosServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.DetallePlanillaHasEmpleadosJpaRepository;
import org.sun.resorts.holidays.test.DetallePlanillaHasEmpleadosFactoryForTest;
import org.sun.resorts.holidays.test.DetallePlanillaHasEmpleadosEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DetallePlanillaHasEmpleadosService
 */
@RunWith(MockitoJUnitRunner.class)
public class DetallePlanillaHasEmpleadosServiceImplTest {

	@InjectMocks
	private DetallePlanillaHasEmpleadosServiceImpl detallePlanillaHasEmpleadosService;
	@Mock
	private DetallePlanillaHasEmpleadosJpaRepository detallePlanillaHasEmpleadosJpaRepository;
	@Mock
	private DetallePlanillaHasEmpleadosServiceMapper detallePlanillaHasEmpleadosServiceMapper;
	
	private DetallePlanillaHasEmpleadosFactoryForTest detallePlanillaHasEmpleadosFactoryForTest = new DetallePlanillaHasEmpleadosFactoryForTest();

	private DetallePlanillaHasEmpleadosEntityFactoryForTest detallePlanillaHasEmpleadosEntityFactoryForTest = new DetallePlanillaHasEmpleadosEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer detallePlanillaIdDetalle = mockValues.nextInteger();
		Integer empleadosIdempleados = mockValues.nextInteger();
		
		DetallePlanillaHasEmpleadosEntityKey detallePlanillaHasEmpleadosEntityKey = new DetallePlanillaHasEmpleadosEntityKey(detallePlanillaIdDetalle, empleadosIdempleados);
		detallePlanillaHasEmpleadosEntityKey.setDetallePlanillaIdDetalle(detallePlanillaIdDetalle);
		detallePlanillaHasEmpleadosEntityKey.setEmpleadosIdempleados(empleadosIdempleados);
		
		DetallePlanillaHasEmpleadosEntity detallePlanillaHasEmpleadosEntity = detallePlanillaHasEmpleadosJpaRepository.findOne(detallePlanillaHasEmpleadosEntityKey);
		
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleados = detallePlanillaHasEmpleadosFactoryForTest.newDetallePlanillaHasEmpleados();
		when(detallePlanillaHasEmpleadosServiceMapper.mapDetallePlanillaHasEmpleadosEntityToDetallePlanillaHasEmpleados(detallePlanillaHasEmpleadosEntity)).thenReturn(detallePlanillaHasEmpleados);

		// When
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleadosFound = detallePlanillaHasEmpleadosService.findById(detallePlanillaIdDetalle, empleadosIdempleados);

		// Then
		assertEquals(detallePlanillaHasEmpleados.getDetallePlanillaIdDetalle(),detallePlanillaHasEmpleadosFound.getDetallePlanillaIdDetalle());
		assertEquals(detallePlanillaHasEmpleados.getEmpleadosIdempleados(),detallePlanillaHasEmpleadosFound.getEmpleadosIdempleados());
	}

	@Test
	public void findAll() {
		// Given
		List<DetallePlanillaHasEmpleadosEntity> detallePlanillaHasEmpleadosEntitys = new ArrayList<DetallePlanillaHasEmpleadosEntity>();
		DetallePlanillaHasEmpleadosEntity detallePlanillaHasEmpleadosEntity1 = detallePlanillaHasEmpleadosEntityFactoryForTest.newDetallePlanillaHasEmpleadosEntity();
		detallePlanillaHasEmpleadosEntitys.add(detallePlanillaHasEmpleadosEntity1);
		DetallePlanillaHasEmpleadosEntity detallePlanillaHasEmpleadosEntity2 = detallePlanillaHasEmpleadosEntityFactoryForTest.newDetallePlanillaHasEmpleadosEntity();
		detallePlanillaHasEmpleadosEntitys.add(detallePlanillaHasEmpleadosEntity2);
		when(detallePlanillaHasEmpleadosJpaRepository.findAll()).thenReturn(detallePlanillaHasEmpleadosEntitys);
		
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleados1 = detallePlanillaHasEmpleadosFactoryForTest.newDetallePlanillaHasEmpleados();
		when(detallePlanillaHasEmpleadosServiceMapper.mapDetallePlanillaHasEmpleadosEntityToDetallePlanillaHasEmpleados(detallePlanillaHasEmpleadosEntity1)).thenReturn(detallePlanillaHasEmpleados1);
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleados2 = detallePlanillaHasEmpleadosFactoryForTest.newDetallePlanillaHasEmpleados();
		when(detallePlanillaHasEmpleadosServiceMapper.mapDetallePlanillaHasEmpleadosEntityToDetallePlanillaHasEmpleados(detallePlanillaHasEmpleadosEntity2)).thenReturn(detallePlanillaHasEmpleados2);

		// When
		List<DetallePlanillaHasEmpleados> detallePlanillaHasEmpleadossFounds = detallePlanillaHasEmpleadosService.findAll();

		// Then
		assertTrue(detallePlanillaHasEmpleados1 == detallePlanillaHasEmpleadossFounds.get(0));
		assertTrue(detallePlanillaHasEmpleados2 == detallePlanillaHasEmpleadossFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleados = detallePlanillaHasEmpleadosFactoryForTest.newDetallePlanillaHasEmpleados();

		DetallePlanillaHasEmpleadosEntityKey id = new DetallePlanillaHasEmpleadosEntityKey(detallePlanillaHasEmpleados.getDetallePlanillaIdDetalle(), detallePlanillaHasEmpleados.getEmpleadosIdempleados());
		DetallePlanillaHasEmpleadosEntity detallePlanillaHasEmpleadosEntity = detallePlanillaHasEmpleadosEntityFactoryForTest.newDetallePlanillaHasEmpleadosEntity();
		when(detallePlanillaHasEmpleadosJpaRepository.findOne(id)).thenReturn(null);
		
		detallePlanillaHasEmpleadosEntity = new DetallePlanillaHasEmpleadosEntity();
		detallePlanillaHasEmpleadosServiceMapper.mapDetallePlanillaHasEmpleadosToDetallePlanillaHasEmpleadosEntity(detallePlanillaHasEmpleados, detallePlanillaHasEmpleadosEntity);
		DetallePlanillaHasEmpleadosEntity detallePlanillaHasEmpleadosEntitySaved = detallePlanillaHasEmpleadosJpaRepository.save(detallePlanillaHasEmpleadosEntity);
		
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleadosSaved = detallePlanillaHasEmpleadosFactoryForTest.newDetallePlanillaHasEmpleados();
		when(detallePlanillaHasEmpleadosServiceMapper.mapDetallePlanillaHasEmpleadosEntityToDetallePlanillaHasEmpleados(detallePlanillaHasEmpleadosEntitySaved)).thenReturn(detallePlanillaHasEmpleadosSaved);

		// When
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleadosResult = detallePlanillaHasEmpleadosService.create(detallePlanillaHasEmpleados);

		// Then
		assertTrue(detallePlanillaHasEmpleadosResult == detallePlanillaHasEmpleadosSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleados = detallePlanillaHasEmpleadosFactoryForTest.newDetallePlanillaHasEmpleados();

		DetallePlanillaHasEmpleadosEntityKey id = new DetallePlanillaHasEmpleadosEntityKey(detallePlanillaHasEmpleados.getDetallePlanillaIdDetalle(), detallePlanillaHasEmpleados.getEmpleadosIdempleados());
		DetallePlanillaHasEmpleadosEntity detallePlanillaHasEmpleadosEntity = detallePlanillaHasEmpleadosEntityFactoryForTest.newDetallePlanillaHasEmpleadosEntity();
		when(detallePlanillaHasEmpleadosJpaRepository.findOne(id)).thenReturn(detallePlanillaHasEmpleadosEntity);

		// When
		Exception exception = null;
		try {
			detallePlanillaHasEmpleadosService.create(detallePlanillaHasEmpleados);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleados = detallePlanillaHasEmpleadosFactoryForTest.newDetallePlanillaHasEmpleados();

		DetallePlanillaHasEmpleadosEntityKey id = new DetallePlanillaHasEmpleadosEntityKey(detallePlanillaHasEmpleados.getDetallePlanillaIdDetalle(), detallePlanillaHasEmpleados.getEmpleadosIdempleados());
		DetallePlanillaHasEmpleadosEntity detallePlanillaHasEmpleadosEntity = detallePlanillaHasEmpleadosEntityFactoryForTest.newDetallePlanillaHasEmpleadosEntity();
		when(detallePlanillaHasEmpleadosJpaRepository.findOne(id)).thenReturn(detallePlanillaHasEmpleadosEntity);
		
		DetallePlanillaHasEmpleadosEntity detallePlanillaHasEmpleadosEntitySaved = detallePlanillaHasEmpleadosEntityFactoryForTest.newDetallePlanillaHasEmpleadosEntity();
		when(detallePlanillaHasEmpleadosJpaRepository.save(detallePlanillaHasEmpleadosEntity)).thenReturn(detallePlanillaHasEmpleadosEntitySaved);
		
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleadosSaved = detallePlanillaHasEmpleadosFactoryForTest.newDetallePlanillaHasEmpleados();
		when(detallePlanillaHasEmpleadosServiceMapper.mapDetallePlanillaHasEmpleadosEntityToDetallePlanillaHasEmpleados(detallePlanillaHasEmpleadosEntitySaved)).thenReturn(detallePlanillaHasEmpleadosSaved);

		// When
		DetallePlanillaHasEmpleados detallePlanillaHasEmpleadosResult = detallePlanillaHasEmpleadosService.update(detallePlanillaHasEmpleados);

		// Then
		verify(detallePlanillaHasEmpleadosServiceMapper).mapDetallePlanillaHasEmpleadosToDetallePlanillaHasEmpleadosEntity(detallePlanillaHasEmpleados, detallePlanillaHasEmpleadosEntity);
		assertTrue(detallePlanillaHasEmpleadosResult == detallePlanillaHasEmpleadosSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer detallePlanillaIdDetalle = mockValues.nextInteger();
		Integer empleadosIdempleados = mockValues.nextInteger();
		DetallePlanillaHasEmpleadosEntityKey detallePlanillaHasEmpleadosEntityKey = new DetallePlanillaHasEmpleadosEntityKey(detallePlanillaIdDetalle, empleadosIdempleados);

		// When
		detallePlanillaHasEmpleadosService.delete(detallePlanillaIdDetalle, empleadosIdempleados);

		// Then
		verify(detallePlanillaHasEmpleadosJpaRepository).delete(detallePlanillaHasEmpleadosEntityKey);
		
	}

}
