/*
 * Created on 31 oct 2015 ( Time 10:51:34 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.Direccion;
import org.sun.resorts.holidays.model.jpa.DireccionEntity;
import org.sun.resorts.holidays.persistence.service.mapping.DireccionServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.DireccionJpaRepository;
import org.sun.resorts.holidays.test.DireccionFactoryForTest;
import org.sun.resorts.holidays.test.DireccionEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DireccionService
 */
@RunWith(MockitoJUnitRunner.class)
public class DireccionServiceImplTest {

	@InjectMocks
	private DireccionServiceImpl direccionService;
	@Mock
	private DireccionJpaRepository direccionJpaRepository;
	@Mock
	private DireccionServiceMapper direccionServiceMapper;
	
	private DireccionFactoryForTest direccionFactoryForTest = new DireccionFactoryForTest();

	private DireccionEntityFactoryForTest direccionEntityFactoryForTest = new DireccionEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer iddireccion = mockValues.nextInteger();
		
		DireccionEntity direccionEntity = direccionJpaRepository.findOne(iddireccion);
		
		Direccion direccion = direccionFactoryForTest.newDireccion();
		when(direccionServiceMapper.mapDireccionEntityToDireccion(direccionEntity)).thenReturn(direccion);

		// When
		Direccion direccionFound = direccionService.findById(iddireccion);

		// Then
		assertEquals(direccion.getIddireccion(),direccionFound.getIddireccion());
	}

	@Test
	public void findAll() {
		// Given
		List<DireccionEntity> direccionEntitys = new ArrayList<DireccionEntity>();
		DireccionEntity direccionEntity1 = direccionEntityFactoryForTest.newDireccionEntity();
		direccionEntitys.add(direccionEntity1);
		DireccionEntity direccionEntity2 = direccionEntityFactoryForTest.newDireccionEntity();
		direccionEntitys.add(direccionEntity2);
		when(direccionJpaRepository.findAll()).thenReturn(direccionEntitys);
		
		Direccion direccion1 = direccionFactoryForTest.newDireccion();
		when(direccionServiceMapper.mapDireccionEntityToDireccion(direccionEntity1)).thenReturn(direccion1);
		Direccion direccion2 = direccionFactoryForTest.newDireccion();
		when(direccionServiceMapper.mapDireccionEntityToDireccion(direccionEntity2)).thenReturn(direccion2);

		// When
		List<Direccion> direccionsFounds = direccionService.findAll();

		// Then
		assertTrue(direccion1 == direccionsFounds.get(0));
		assertTrue(direccion2 == direccionsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Direccion direccion = direccionFactoryForTest.newDireccion();

		DireccionEntity direccionEntity = direccionEntityFactoryForTest.newDireccionEntity();
		when(direccionJpaRepository.findOne(direccion.getIddireccion())).thenReturn(null);
		
		direccionEntity = new DireccionEntity();
		direccionServiceMapper.mapDireccionToDireccionEntity(direccion, direccionEntity);
		DireccionEntity direccionEntitySaved = direccionJpaRepository.save(direccionEntity);
		
		Direccion direccionSaved = direccionFactoryForTest.newDireccion();
		when(direccionServiceMapper.mapDireccionEntityToDireccion(direccionEntitySaved)).thenReturn(direccionSaved);

		// When
		Direccion direccionResult = direccionService.create(direccion);

		// Then
		assertTrue(direccionResult == direccionSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Direccion direccion = direccionFactoryForTest.newDireccion();

		DireccionEntity direccionEntity = direccionEntityFactoryForTest.newDireccionEntity();
		when(direccionJpaRepository.findOne(direccion.getIddireccion())).thenReturn(direccionEntity);

		// When
		Exception exception = null;
		try {
			direccionService.create(direccion);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Direccion direccion = direccionFactoryForTest.newDireccion();

		DireccionEntity direccionEntity = direccionEntityFactoryForTest.newDireccionEntity();
		when(direccionJpaRepository.findOne(direccion.getIddireccion())).thenReturn(direccionEntity);
		
		DireccionEntity direccionEntitySaved = direccionEntityFactoryForTest.newDireccionEntity();
		when(direccionJpaRepository.save(direccionEntity)).thenReturn(direccionEntitySaved);
		
		Direccion direccionSaved = direccionFactoryForTest.newDireccion();
		when(direccionServiceMapper.mapDireccionEntityToDireccion(direccionEntitySaved)).thenReturn(direccionSaved);

		// When
		Direccion direccionResult = direccionService.update(direccion);

		// Then
		verify(direccionServiceMapper).mapDireccionToDireccionEntity(direccion, direccionEntity);
		assertTrue(direccionResult == direccionSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer iddireccion = mockValues.nextInteger();

		// When
		direccionService.delete(iddireccion);

		// Then
		verify(direccionJpaRepository).delete(iddireccion);
		
	}

}
