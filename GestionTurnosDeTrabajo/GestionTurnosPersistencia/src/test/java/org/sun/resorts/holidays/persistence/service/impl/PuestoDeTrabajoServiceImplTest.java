/*
 * Created on 31 oct 2015 ( Time 10:51:35 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.PuestoDeTrabajo;
import org.sun.resorts.holidays.model.jpa.PuestoDeTrabajoEntity;
import java.util.List;
import org.sun.resorts.holidays.persistence.service.mapping.PuestoDeTrabajoServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.PuestoDeTrabajoJpaRepository;
import org.sun.resorts.holidays.test.PuestoDeTrabajoFactoryForTest;
import org.sun.resorts.holidays.test.PuestoDeTrabajoEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PuestoDeTrabajoService
 */
@RunWith(MockitoJUnitRunner.class)
public class PuestoDeTrabajoServiceImplTest {

	@InjectMocks
	private PuestoDeTrabajoServiceImpl puestoDeTrabajoService;
	@Mock
	private PuestoDeTrabajoJpaRepository puestoDeTrabajoJpaRepository;
	@Mock
	private PuestoDeTrabajoServiceMapper puestoDeTrabajoServiceMapper;
	
	private PuestoDeTrabajoFactoryForTest puestoDeTrabajoFactoryForTest = new PuestoDeTrabajoFactoryForTest();

	private PuestoDeTrabajoEntityFactoryForTest puestoDeTrabajoEntityFactoryForTest = new PuestoDeTrabajoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idpuestoDeTrabajo = mockValues.nextInteger();
		
		PuestoDeTrabajoEntity puestoDeTrabajoEntity = puestoDeTrabajoJpaRepository.findOne(idpuestoDeTrabajo);
		
		PuestoDeTrabajo puestoDeTrabajo = puestoDeTrabajoFactoryForTest.newPuestoDeTrabajo();
		when(puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntity)).thenReturn(puestoDeTrabajo);

		// When
		PuestoDeTrabajo puestoDeTrabajoFound = puestoDeTrabajoService.findById(idpuestoDeTrabajo);

		// Then
		assertEquals(puestoDeTrabajo.getIdpuestoDeTrabajo(),puestoDeTrabajoFound.getIdpuestoDeTrabajo());
	}

	@Test
	public void findAll() {
		// Given
		List<PuestoDeTrabajoEntity> puestoDeTrabajoEntitys = new ArrayList<PuestoDeTrabajoEntity>();
		PuestoDeTrabajoEntity puestoDeTrabajoEntity1 = puestoDeTrabajoEntityFactoryForTest.newPuestoDeTrabajoEntity();
		puestoDeTrabajoEntitys.add(puestoDeTrabajoEntity1);
		PuestoDeTrabajoEntity puestoDeTrabajoEntity2 = puestoDeTrabajoEntityFactoryForTest.newPuestoDeTrabajoEntity();
		puestoDeTrabajoEntitys.add(puestoDeTrabajoEntity2);
		when(puestoDeTrabajoJpaRepository.findAll()).thenReturn(puestoDeTrabajoEntitys);
		
		PuestoDeTrabajo puestoDeTrabajo1 = puestoDeTrabajoFactoryForTest.newPuestoDeTrabajo();
		when(puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntity1)).thenReturn(puestoDeTrabajo1);
		PuestoDeTrabajo puestoDeTrabajo2 = puestoDeTrabajoFactoryForTest.newPuestoDeTrabajo();
		when(puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntity2)).thenReturn(puestoDeTrabajo2);

		// When
		List<PuestoDeTrabajo> puestoDeTrabajosFounds = puestoDeTrabajoService.findAll();

		// Then
		assertTrue(puestoDeTrabajo1 == puestoDeTrabajosFounds.get(0));
		assertTrue(puestoDeTrabajo2 == puestoDeTrabajosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PuestoDeTrabajo puestoDeTrabajo = puestoDeTrabajoFactoryForTest.newPuestoDeTrabajo();

		PuestoDeTrabajoEntity puestoDeTrabajoEntity = puestoDeTrabajoEntityFactoryForTest.newPuestoDeTrabajoEntity();
		when(puestoDeTrabajoJpaRepository.findOne(puestoDeTrabajo.getIdpuestoDeTrabajo())).thenReturn(null);
		
		puestoDeTrabajoEntity = new PuestoDeTrabajoEntity();
		puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoToPuestoDeTrabajoEntity(puestoDeTrabajo, puestoDeTrabajoEntity);
		PuestoDeTrabajoEntity puestoDeTrabajoEntitySaved = puestoDeTrabajoJpaRepository.save(puestoDeTrabajoEntity);
		
		PuestoDeTrabajo puestoDeTrabajoSaved = puestoDeTrabajoFactoryForTest.newPuestoDeTrabajo();
		when(puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntitySaved)).thenReturn(puestoDeTrabajoSaved);

		// When
		PuestoDeTrabajo puestoDeTrabajoResult = puestoDeTrabajoService.create(puestoDeTrabajo);

		// Then
		assertTrue(puestoDeTrabajoResult == puestoDeTrabajoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PuestoDeTrabajo puestoDeTrabajo = puestoDeTrabajoFactoryForTest.newPuestoDeTrabajo();

		PuestoDeTrabajoEntity puestoDeTrabajoEntity = puestoDeTrabajoEntityFactoryForTest.newPuestoDeTrabajoEntity();
		when(puestoDeTrabajoJpaRepository.findOne(puestoDeTrabajo.getIdpuestoDeTrabajo())).thenReturn(puestoDeTrabajoEntity);

		// When
		Exception exception = null;
		try {
			puestoDeTrabajoService.create(puestoDeTrabajo);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PuestoDeTrabajo puestoDeTrabajo = puestoDeTrabajoFactoryForTest.newPuestoDeTrabajo();

		PuestoDeTrabajoEntity puestoDeTrabajoEntity = puestoDeTrabajoEntityFactoryForTest.newPuestoDeTrabajoEntity();
		when(puestoDeTrabajoJpaRepository.findOne(puestoDeTrabajo.getIdpuestoDeTrabajo())).thenReturn(puestoDeTrabajoEntity);
		
		PuestoDeTrabajoEntity puestoDeTrabajoEntitySaved = puestoDeTrabajoEntityFactoryForTest.newPuestoDeTrabajoEntity();
		when(puestoDeTrabajoJpaRepository.save(puestoDeTrabajoEntity)).thenReturn(puestoDeTrabajoEntitySaved);
		
		PuestoDeTrabajo puestoDeTrabajoSaved = puestoDeTrabajoFactoryForTest.newPuestoDeTrabajo();
		when(puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntitySaved)).thenReturn(puestoDeTrabajoSaved);

		// When
		PuestoDeTrabajo puestoDeTrabajoResult = puestoDeTrabajoService.update(puestoDeTrabajo);

		// Then
		verify(puestoDeTrabajoServiceMapper).mapPuestoDeTrabajoToPuestoDeTrabajoEntity(puestoDeTrabajo, puestoDeTrabajoEntity);
		assertTrue(puestoDeTrabajoResult == puestoDeTrabajoSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idpuestoDeTrabajo = mockValues.nextInteger();

		// When
		puestoDeTrabajoService.delete(idpuestoDeTrabajo);

		// Then
		verify(puestoDeTrabajoJpaRepository).delete(idpuestoDeTrabajo);
		
	}

}
