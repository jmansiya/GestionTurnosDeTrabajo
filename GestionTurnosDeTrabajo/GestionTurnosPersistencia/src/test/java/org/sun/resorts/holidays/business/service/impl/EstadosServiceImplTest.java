/*
 * Created on 28 oct 2015 ( Time 21:40:10 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.Estados;
import org.sun.resorts.holidays.model.jpa.EstadosEntity;
import java.util.List;
import org.sun.resorts.holidays.business.service.mapping.EstadosServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.EstadosJpaRepository;
import org.sun.resorts.holidays.test.EstadosFactoryForTest;
import org.sun.resorts.holidays.test.EstadosEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of EstadosService
 */
@RunWith(MockitoJUnitRunner.class)
public class EstadosServiceImplTest {

	@InjectMocks
	private EstadosServiceImpl estadosService;
	@Mock
	private EstadosJpaRepository estadosJpaRepository;
	@Mock
	private EstadosServiceMapper estadosServiceMapper;
	
	private EstadosFactoryForTest estadosFactoryForTest = new EstadosFactoryForTest();

	private EstadosEntityFactoryForTest estadosEntityFactoryForTest = new EstadosEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idestados = mockValues.nextInteger();
		
		EstadosEntity estadosEntity = estadosJpaRepository.findOne(idestados);
		
		Estados estados = estadosFactoryForTest.newEstados();
		when(estadosServiceMapper.mapEstadosEntityToEstados(estadosEntity)).thenReturn(estados);

		// When
		Estados estadosFound = estadosService.findById(idestados);

		// Then
		assertEquals(estados.getIdestados(),estadosFound.getIdestados());
	}

	@Test
	public void findAll() {
		// Given
		List<EstadosEntity> estadosEntitys = new ArrayList<EstadosEntity>();
		EstadosEntity estadosEntity1 = estadosEntityFactoryForTest.newEstadosEntity();
		estadosEntitys.add(estadosEntity1);
		EstadosEntity estadosEntity2 = estadosEntityFactoryForTest.newEstadosEntity();
		estadosEntitys.add(estadosEntity2);
		when(estadosJpaRepository.findAll()).thenReturn(estadosEntitys);
		
		Estados estados1 = estadosFactoryForTest.newEstados();
		when(estadosServiceMapper.mapEstadosEntityToEstados(estadosEntity1)).thenReturn(estados1);
		Estados estados2 = estadosFactoryForTest.newEstados();
		when(estadosServiceMapper.mapEstadosEntityToEstados(estadosEntity2)).thenReturn(estados2);

		// When
		List<Estados> estadossFounds = estadosService.findAll();

		// Then
		assertTrue(estados1 == estadossFounds.get(0));
		assertTrue(estados2 == estadossFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Estados estados = estadosFactoryForTest.newEstados();

		EstadosEntity estadosEntity = estadosEntityFactoryForTest.newEstadosEntity();
		when(estadosJpaRepository.findOne(estados.getIdestados())).thenReturn(null);
		
		estadosEntity = new EstadosEntity();
		estadosServiceMapper.mapEstadosToEstadosEntity(estados, estadosEntity);
		EstadosEntity estadosEntitySaved = estadosJpaRepository.save(estadosEntity);
		
		Estados estadosSaved = estadosFactoryForTest.newEstados();
		when(estadosServiceMapper.mapEstadosEntityToEstados(estadosEntitySaved)).thenReturn(estadosSaved);

		// When
		Estados estadosResult = estadosService.create(estados);

		// Then
		assertTrue(estadosResult == estadosSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Estados estados = estadosFactoryForTest.newEstados();

		EstadosEntity estadosEntity = estadosEntityFactoryForTest.newEstadosEntity();
		when(estadosJpaRepository.findOne(estados.getIdestados())).thenReturn(estadosEntity);

		// When
		Exception exception = null;
		try {
			estadosService.create(estados);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Estados estados = estadosFactoryForTest.newEstados();

		EstadosEntity estadosEntity = estadosEntityFactoryForTest.newEstadosEntity();
		when(estadosJpaRepository.findOne(estados.getIdestados())).thenReturn(estadosEntity);
		
		EstadosEntity estadosEntitySaved = estadosEntityFactoryForTest.newEstadosEntity();
		when(estadosJpaRepository.save(estadosEntity)).thenReturn(estadosEntitySaved);
		
		Estados estadosSaved = estadosFactoryForTest.newEstados();
		when(estadosServiceMapper.mapEstadosEntityToEstados(estadosEntitySaved)).thenReturn(estadosSaved);

		// When
		Estados estadosResult = estadosService.update(estados);

		// Then
		verify(estadosServiceMapper).mapEstadosToEstadosEntity(estados, estadosEntity);
		assertTrue(estadosResult == estadosSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idestados = mockValues.nextInteger();

		// When
		estadosService.delete(idestados);

		// Then
		verify(estadosJpaRepository).delete(idestados);
		
	}

}
