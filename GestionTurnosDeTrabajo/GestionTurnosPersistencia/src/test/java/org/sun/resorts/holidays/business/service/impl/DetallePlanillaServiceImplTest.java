/*
 * Created on 28 oct 2015 ( Time 21:40:09 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.DetallePlanilla;
import org.sun.resorts.holidays.model.jpa.DetallePlanillaEntity;
import java.util.Date;
import java.util.List;
import org.sun.resorts.holidays.business.service.mapping.DetallePlanillaServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.DetallePlanillaJpaRepository;
import org.sun.resorts.holidays.test.DetallePlanillaFactoryForTest;
import org.sun.resorts.holidays.test.DetallePlanillaEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DetallePlanillaService
 */
@RunWith(MockitoJUnitRunner.class)
public class DetallePlanillaServiceImplTest {

	@InjectMocks
	private DetallePlanillaServiceImpl detallePlanillaService;
	@Mock
	private DetallePlanillaJpaRepository detallePlanillaJpaRepository;
	@Mock
	private DetallePlanillaServiceMapper detallePlanillaServiceMapper;
	
	private DetallePlanillaFactoryForTest detallePlanillaFactoryForTest = new DetallePlanillaFactoryForTest();

	private DetallePlanillaEntityFactoryForTest detallePlanillaEntityFactoryForTest = new DetallePlanillaEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer iddetallePlanilla = mockValues.nextInteger();
		
		DetallePlanillaEntity detallePlanillaEntity = detallePlanillaJpaRepository.findOne(iddetallePlanilla);
		
		DetallePlanilla detallePlanilla = detallePlanillaFactoryForTest.newDetallePlanilla();
		when(detallePlanillaServiceMapper.mapDetallePlanillaEntityToDetallePlanilla(detallePlanillaEntity)).thenReturn(detallePlanilla);

		// When
		DetallePlanilla detallePlanillaFound = detallePlanillaService.findById(iddetallePlanilla);

		// Then
		assertEquals(detallePlanilla.getIddetallePlanilla(),detallePlanillaFound.getIddetallePlanilla());
	}

	@Test
	public void findAll() {
		// Given
		List<DetallePlanillaEntity> detallePlanillaEntitys = new ArrayList<DetallePlanillaEntity>();
		DetallePlanillaEntity detallePlanillaEntity1 = detallePlanillaEntityFactoryForTest.newDetallePlanillaEntity();
		detallePlanillaEntitys.add(detallePlanillaEntity1);
		DetallePlanillaEntity detallePlanillaEntity2 = detallePlanillaEntityFactoryForTest.newDetallePlanillaEntity();
		detallePlanillaEntitys.add(detallePlanillaEntity2);
		when(detallePlanillaJpaRepository.findAll()).thenReturn(detallePlanillaEntitys);
		
		DetallePlanilla detallePlanilla1 = detallePlanillaFactoryForTest.newDetallePlanilla();
		when(detallePlanillaServiceMapper.mapDetallePlanillaEntityToDetallePlanilla(detallePlanillaEntity1)).thenReturn(detallePlanilla1);
		DetallePlanilla detallePlanilla2 = detallePlanillaFactoryForTest.newDetallePlanilla();
		when(detallePlanillaServiceMapper.mapDetallePlanillaEntityToDetallePlanilla(detallePlanillaEntity2)).thenReturn(detallePlanilla2);

		// When
		List<DetallePlanilla> detallePlanillasFounds = detallePlanillaService.findAll();

		// Then
		assertTrue(detallePlanilla1 == detallePlanillasFounds.get(0));
		assertTrue(detallePlanilla2 == detallePlanillasFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DetallePlanilla detallePlanilla = detallePlanillaFactoryForTest.newDetallePlanilla();

		DetallePlanillaEntity detallePlanillaEntity = detallePlanillaEntityFactoryForTest.newDetallePlanillaEntity();
		when(detallePlanillaJpaRepository.findOne(detallePlanilla.getIddetallePlanilla())).thenReturn(null);
		
		detallePlanillaEntity = new DetallePlanillaEntity();
		detallePlanillaServiceMapper.mapDetallePlanillaToDetallePlanillaEntity(detallePlanilla, detallePlanillaEntity);
		DetallePlanillaEntity detallePlanillaEntitySaved = detallePlanillaJpaRepository.save(detallePlanillaEntity);
		
		DetallePlanilla detallePlanillaSaved = detallePlanillaFactoryForTest.newDetallePlanilla();
		when(detallePlanillaServiceMapper.mapDetallePlanillaEntityToDetallePlanilla(detallePlanillaEntitySaved)).thenReturn(detallePlanillaSaved);

		// When
		DetallePlanilla detallePlanillaResult = detallePlanillaService.create(detallePlanilla);

		// Then
		assertTrue(detallePlanillaResult == detallePlanillaSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DetallePlanilla detallePlanilla = detallePlanillaFactoryForTest.newDetallePlanilla();

		DetallePlanillaEntity detallePlanillaEntity = detallePlanillaEntityFactoryForTest.newDetallePlanillaEntity();
		when(detallePlanillaJpaRepository.findOne(detallePlanilla.getIddetallePlanilla())).thenReturn(detallePlanillaEntity);

		// When
		Exception exception = null;
		try {
			detallePlanillaService.create(detallePlanilla);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DetallePlanilla detallePlanilla = detallePlanillaFactoryForTest.newDetallePlanilla();

		DetallePlanillaEntity detallePlanillaEntity = detallePlanillaEntityFactoryForTest.newDetallePlanillaEntity();
		when(detallePlanillaJpaRepository.findOne(detallePlanilla.getIddetallePlanilla())).thenReturn(detallePlanillaEntity);
		
		DetallePlanillaEntity detallePlanillaEntitySaved = detallePlanillaEntityFactoryForTest.newDetallePlanillaEntity();
		when(detallePlanillaJpaRepository.save(detallePlanillaEntity)).thenReturn(detallePlanillaEntitySaved);
		
		DetallePlanilla detallePlanillaSaved = detallePlanillaFactoryForTest.newDetallePlanilla();
		when(detallePlanillaServiceMapper.mapDetallePlanillaEntityToDetallePlanilla(detallePlanillaEntitySaved)).thenReturn(detallePlanillaSaved);

		// When
		DetallePlanilla detallePlanillaResult = detallePlanillaService.update(detallePlanilla);

		// Then
		verify(detallePlanillaServiceMapper).mapDetallePlanillaToDetallePlanillaEntity(detallePlanilla, detallePlanillaEntity);
		assertTrue(detallePlanillaResult == detallePlanillaSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer iddetallePlanilla = mockValues.nextInteger();

		// When
		detallePlanillaService.delete(iddetallePlanilla);

		// Then
		verify(detallePlanillaJpaRepository).delete(iddetallePlanilla);
		
	}

}
