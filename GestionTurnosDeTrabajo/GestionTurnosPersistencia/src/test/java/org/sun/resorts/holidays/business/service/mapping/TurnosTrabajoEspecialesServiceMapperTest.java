/*
 * Created on 28 oct 2015 ( Time 21:40:11 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.sun.resorts.holidays.model.TurnosTrabajoEspeciales;
import org.sun.resorts.holidays.model.jpa.TurnosTrabajoEspecialesEntity;
import org.sun.resorts.holidays.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TurnosTrabajoEspecialesServiceMapperTest {

	private TurnosTrabajoEspecialesServiceMapper turnosTrabajoEspecialesServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		turnosTrabajoEspecialesServiceMapper = new TurnosTrabajoEspecialesServiceMapper();
		turnosTrabajoEspecialesServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TurnosTrabajoEspecialesEntity' to 'TurnosTrabajoEspeciales'
	 * @param turnosTrabajoEspecialesEntity
	 */
	@Test
	public void testMapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales() {
		// Given
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = new TurnosTrabajoEspecialesEntity();
		turnosTrabajoEspecialesEntity.setFechaInicio(mockValues.nextDate());
		turnosTrabajoEspecialesEntity.setFechaFin(mockValues.nextDate());
		turnosTrabajoEspecialesEntity.setObservaciones(mockValues.nextString(45));
		
		// When
		TurnosTrabajoEspeciales turnosTrabajoEspeciales = turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntity);
		
		// Then
		assertEquals(turnosTrabajoEspecialesEntity.getFechaInicio(), turnosTrabajoEspeciales.getFechaInicio());
		assertEquals(turnosTrabajoEspecialesEntity.getFechaFin(), turnosTrabajoEspeciales.getFechaFin());
		assertEquals(turnosTrabajoEspecialesEntity.getObservaciones(), turnosTrabajoEspeciales.getObservaciones());
	}
	
	/**
	 * Test : Mapping from 'TurnosTrabajoEspeciales' to 'TurnosTrabajoEspecialesEntity'
	 */
	@Test
	public void testMapTurnosTrabajoEspecialesToTurnosTrabajoEspecialesEntity() {
		// Given
		TurnosTrabajoEspeciales turnosTrabajoEspeciales = new TurnosTrabajoEspeciales();
		turnosTrabajoEspeciales.setFechaInicio(mockValues.nextDate());
		turnosTrabajoEspeciales.setFechaFin(mockValues.nextDate());
		turnosTrabajoEspeciales.setObservaciones(mockValues.nextString(45));

		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = new TurnosTrabajoEspecialesEntity();
		
		// When
		turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesToTurnosTrabajoEspecialesEntity(turnosTrabajoEspeciales, turnosTrabajoEspecialesEntity);
		
		// Then
		assertEquals(turnosTrabajoEspeciales.getFechaInicio(), turnosTrabajoEspecialesEntity.getFechaInicio());
		assertEquals(turnosTrabajoEspeciales.getFechaFin(), turnosTrabajoEspecialesEntity.getFechaFin());
		assertEquals(turnosTrabajoEspeciales.getObservaciones(), turnosTrabajoEspecialesEntity.getObservaciones());
	}

}