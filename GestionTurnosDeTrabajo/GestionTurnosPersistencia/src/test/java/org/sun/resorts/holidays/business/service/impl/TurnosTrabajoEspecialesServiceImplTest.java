/*
 * Created on 28 oct 2015 ( Time 21:40:11 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.TurnosTrabajoEspeciales;
import org.sun.resorts.holidays.model.jpa.TurnosTrabajoEspecialesEntity;
import org.sun.resorts.holidays.model.jpa.TurnosTrabajoEspecialesEntityKey;
import java.util.Date;
import org.sun.resorts.holidays.business.service.mapping.TurnosTrabajoEspecialesServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.TurnosTrabajoEspecialesJpaRepository;
import org.sun.resorts.holidays.test.TurnosTrabajoEspecialesFactoryForTest;
import org.sun.resorts.holidays.test.TurnosTrabajoEspecialesEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TurnosTrabajoEspecialesService
 */
@RunWith(MockitoJUnitRunner.class)
public class TurnosTrabajoEspecialesServiceImplTest {

	@InjectMocks
	private TurnosTrabajoEspecialesServiceImpl turnosTrabajoEspecialesService;
	@Mock
	private TurnosTrabajoEspecialesJpaRepository turnosTrabajoEspecialesJpaRepository;
	@Mock
	private TurnosTrabajoEspecialesServiceMapper turnosTrabajoEspecialesServiceMapper;
	
	private TurnosTrabajoEspecialesFactoryForTest turnosTrabajoEspecialesFactoryForTest = new TurnosTrabajoEspecialesFactoryForTest();

	private TurnosTrabajoEspecialesEntityFactoryForTest turnosTrabajoEspecialesEntityFactoryForTest = new TurnosTrabajoEspecialesEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer empleadosIdempleados = mockValues.nextInteger();
		Integer turnosDeTrabajoIdturnosDeTrabajo = mockValues.nextInteger();
		
		TurnosTrabajoEspecialesEntityKey turnosTrabajoEspecialesEntityKey = new TurnosTrabajoEspecialesEntityKey(empleadosIdempleados, turnosDeTrabajoIdturnosDeTrabajo);
		turnosTrabajoEspecialesEntityKey.setEmpleadosIdempleados(empleadosIdempleados);
		turnosTrabajoEspecialesEntityKey.setTurnosDeTrabajoIdturnosDeTrabajo(turnosDeTrabajoIdturnosDeTrabajo);
		
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = turnosTrabajoEspecialesJpaRepository.findOne(turnosTrabajoEspecialesEntityKey);
		
		TurnosTrabajoEspeciales turnosTrabajoEspeciales = turnosTrabajoEspecialesFactoryForTest.newTurnosTrabajoEspeciales();
		when(turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntity)).thenReturn(turnosTrabajoEspeciales);

		// When
		TurnosTrabajoEspeciales turnosTrabajoEspecialesFound = turnosTrabajoEspecialesService.findById(empleadosIdempleados, turnosDeTrabajoIdturnosDeTrabajo);

		// Then
		assertEquals(turnosTrabajoEspeciales.getEmpleadosIdempleados(),turnosTrabajoEspecialesFound.getEmpleadosIdempleados());
		assertEquals(turnosTrabajoEspeciales.getTurnosDeTrabajoIdturnosDeTrabajo(),turnosTrabajoEspecialesFound.getTurnosDeTrabajoIdturnosDeTrabajo());
	}

	@Test
	public void findAll() {
		// Given
		List<TurnosTrabajoEspecialesEntity> turnosTrabajoEspecialesEntitys = new ArrayList<TurnosTrabajoEspecialesEntity>();
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity1 = turnosTrabajoEspecialesEntityFactoryForTest.newTurnosTrabajoEspecialesEntity();
		turnosTrabajoEspecialesEntitys.add(turnosTrabajoEspecialesEntity1);
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity2 = turnosTrabajoEspecialesEntityFactoryForTest.newTurnosTrabajoEspecialesEntity();
		turnosTrabajoEspecialesEntitys.add(turnosTrabajoEspecialesEntity2);
		when(turnosTrabajoEspecialesJpaRepository.findAll()).thenReturn(turnosTrabajoEspecialesEntitys);
		
		TurnosTrabajoEspeciales turnosTrabajoEspeciales1 = turnosTrabajoEspecialesFactoryForTest.newTurnosTrabajoEspeciales();
		when(turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntity1)).thenReturn(turnosTrabajoEspeciales1);
		TurnosTrabajoEspeciales turnosTrabajoEspeciales2 = turnosTrabajoEspecialesFactoryForTest.newTurnosTrabajoEspeciales();
		when(turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntity2)).thenReturn(turnosTrabajoEspeciales2);

		// When
		List<TurnosTrabajoEspeciales> turnosTrabajoEspecialessFounds = turnosTrabajoEspecialesService.findAll();

		// Then
		assertTrue(turnosTrabajoEspeciales1 == turnosTrabajoEspecialessFounds.get(0));
		assertTrue(turnosTrabajoEspeciales2 == turnosTrabajoEspecialessFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TurnosTrabajoEspeciales turnosTrabajoEspeciales = turnosTrabajoEspecialesFactoryForTest.newTurnosTrabajoEspeciales();

		TurnosTrabajoEspecialesEntityKey id = new TurnosTrabajoEspecialesEntityKey(turnosTrabajoEspeciales.getEmpleadosIdempleados(), turnosTrabajoEspeciales.getTurnosDeTrabajoIdturnosDeTrabajo());
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = turnosTrabajoEspecialesEntityFactoryForTest.newTurnosTrabajoEspecialesEntity();
		when(turnosTrabajoEspecialesJpaRepository.findOne(id)).thenReturn(null);
		
		turnosTrabajoEspecialesEntity = new TurnosTrabajoEspecialesEntity();
		turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesToTurnosTrabajoEspecialesEntity(turnosTrabajoEspeciales, turnosTrabajoEspecialesEntity);
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntitySaved = turnosTrabajoEspecialesJpaRepository.save(turnosTrabajoEspecialesEntity);
		
		TurnosTrabajoEspeciales turnosTrabajoEspecialesSaved = turnosTrabajoEspecialesFactoryForTest.newTurnosTrabajoEspeciales();
		when(turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntitySaved)).thenReturn(turnosTrabajoEspecialesSaved);

		// When
		TurnosTrabajoEspeciales turnosTrabajoEspecialesResult = turnosTrabajoEspecialesService.create(turnosTrabajoEspeciales);

		// Then
		assertTrue(turnosTrabajoEspecialesResult == turnosTrabajoEspecialesSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TurnosTrabajoEspeciales turnosTrabajoEspeciales = turnosTrabajoEspecialesFactoryForTest.newTurnosTrabajoEspeciales();

		TurnosTrabajoEspecialesEntityKey id = new TurnosTrabajoEspecialesEntityKey(turnosTrabajoEspeciales.getEmpleadosIdempleados(), turnosTrabajoEspeciales.getTurnosDeTrabajoIdturnosDeTrabajo());
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = turnosTrabajoEspecialesEntityFactoryForTest.newTurnosTrabajoEspecialesEntity();
		when(turnosTrabajoEspecialesJpaRepository.findOne(id)).thenReturn(turnosTrabajoEspecialesEntity);

		// When
		Exception exception = null;
		try {
			turnosTrabajoEspecialesService.create(turnosTrabajoEspeciales);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TurnosTrabajoEspeciales turnosTrabajoEspeciales = turnosTrabajoEspecialesFactoryForTest.newTurnosTrabajoEspeciales();

		TurnosTrabajoEspecialesEntityKey id = new TurnosTrabajoEspecialesEntityKey(turnosTrabajoEspeciales.getEmpleadosIdempleados(), turnosTrabajoEspeciales.getTurnosDeTrabajoIdturnosDeTrabajo());
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = turnosTrabajoEspecialesEntityFactoryForTest.newTurnosTrabajoEspecialesEntity();
		when(turnosTrabajoEspecialesJpaRepository.findOne(id)).thenReturn(turnosTrabajoEspecialesEntity);
		
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntitySaved = turnosTrabajoEspecialesEntityFactoryForTest.newTurnosTrabajoEspecialesEntity();
		when(turnosTrabajoEspecialesJpaRepository.save(turnosTrabajoEspecialesEntity)).thenReturn(turnosTrabajoEspecialesEntitySaved);
		
		TurnosTrabajoEspeciales turnosTrabajoEspecialesSaved = turnosTrabajoEspecialesFactoryForTest.newTurnosTrabajoEspeciales();
		when(turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntitySaved)).thenReturn(turnosTrabajoEspecialesSaved);

		// When
		TurnosTrabajoEspeciales turnosTrabajoEspecialesResult = turnosTrabajoEspecialesService.update(turnosTrabajoEspeciales);

		// Then
		verify(turnosTrabajoEspecialesServiceMapper).mapTurnosTrabajoEspecialesToTurnosTrabajoEspecialesEntity(turnosTrabajoEspeciales, turnosTrabajoEspecialesEntity);
		assertTrue(turnosTrabajoEspecialesResult == turnosTrabajoEspecialesSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer empleadosIdempleados = mockValues.nextInteger();
		Integer turnosDeTrabajoIdturnosDeTrabajo = mockValues.nextInteger();
		TurnosTrabajoEspecialesEntityKey turnosTrabajoEspecialesEntityKey = new TurnosTrabajoEspecialesEntityKey(empleadosIdempleados, turnosDeTrabajoIdturnosDeTrabajo);

		// When
		turnosTrabajoEspecialesService.delete(empleadosIdempleados, turnosDeTrabajoIdturnosDeTrabajo);

		// Then
		verify(turnosTrabajoEspecialesJpaRepository).delete(turnosTrabajoEspecialesEntityKey);
		
	}

}
