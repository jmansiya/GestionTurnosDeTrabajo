/*
 * Created on 31 oct 2015 ( Time 10:51:33 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.sun.resorts.holidays.model.CentrosDeTrabajo;
import org.sun.resorts.holidays.model.jpa.CentrosDeTrabajoEntity;
import org.sun.resorts.holidays.model.jpa.DireccionEntity;
import org.sun.resorts.holidays.model.jpa.EmpleadosEntity;
import org.sun.resorts.holidays.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class CentrosDeTrabajoServiceMapperTest {

	private CentrosDeTrabajoServiceMapper centrosDeTrabajoServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		centrosDeTrabajoServiceMapper = new CentrosDeTrabajoServiceMapper();
		centrosDeTrabajoServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'CentrosDeTrabajoEntity' to 'CentrosDeTrabajo'
	 * @param centrosDeTrabajoEntity
	 */
	@Test
	public void testMapCentrosDeTrabajoEntityToCentrosDeTrabajo() {
		// Given
		CentrosDeTrabajoEntity centrosDeTrabajoEntity = new CentrosDeTrabajoEntity();
		centrosDeTrabajoEntity.setNombre(mockValues.nextString(45));
		centrosDeTrabajoEntity.setDescripcion(mockValues.nextString(100));
		centrosDeTrabajoEntity.setParking(mockValues.nextBoolean());
		centrosDeTrabajoEntity.setPiscina(mockValues.nextBoolean());
		centrosDeTrabajoEntity.setNumHabitaciones(mockValues.nextInteger());
		centrosDeTrabajoEntity.setNumEstrellas(mockValues.nextInteger());
		centrosDeTrabajoEntity.setDireccion(new DireccionEntity());
		centrosDeTrabajoEntity.getDireccion().setIddireccion(mockValues.nextInteger());
		centrosDeTrabajoEntity.setAdministrador(new EmpleadosEntity());
		centrosDeTrabajoEntity.getAdministrador().setIdempleados(mockValues.nextInteger());
		
		// When
		CentrosDeTrabajo centrosDeTrabajo = centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntity);
		
		// Then
		assertEquals(centrosDeTrabajoEntity.getNombre(), centrosDeTrabajo.getNombre());
		assertEquals(centrosDeTrabajoEntity.getDescripcion(), centrosDeTrabajo.getDescripcion());
		assertEquals(centrosDeTrabajoEntity.getParking(), centrosDeTrabajo.getParking());
		assertEquals(centrosDeTrabajoEntity.getPiscina(), centrosDeTrabajo.getPiscina());
		assertEquals(centrosDeTrabajoEntity.getNumHabitaciones(), centrosDeTrabajo.getNumHabitaciones());
		assertEquals(centrosDeTrabajoEntity.getNumEstrellas(), centrosDeTrabajo.getNumEstrellas());
		assertEquals(centrosDeTrabajoEntity.getDireccion().getIddireccion(), centrosDeTrabajo.getIdDireccion());
		assertEquals(centrosDeTrabajoEntity.getAdministrador().getIdempleados(), centrosDeTrabajo.getIdAdministrador());
	}
	
	/**
	 * Test : Mapping from 'CentrosDeTrabajo' to 'CentrosDeTrabajoEntity'
	 */
	@Test
	public void testMapCentrosDeTrabajoToCentrosDeTrabajoEntity() {
		// Given
		CentrosDeTrabajo centrosDeTrabajo = new CentrosDeTrabajo();
		centrosDeTrabajo.setNombre(mockValues.nextString(45));
		centrosDeTrabajo.setDescripcion(mockValues.nextString(100));
		centrosDeTrabajo.setParking(mockValues.nextBoolean());
		centrosDeTrabajo.setPiscina(mockValues.nextBoolean());
		centrosDeTrabajo.setNumHabitaciones(mockValues.nextInteger());
		centrosDeTrabajo.setNumEstrellas(mockValues.nextInteger());
		centrosDeTrabajo.setIdDireccion(mockValues.nextInteger());
		centrosDeTrabajo.setIdAdministrador(mockValues.nextInteger());

		CentrosDeTrabajoEntity centrosDeTrabajoEntity = new CentrosDeTrabajoEntity();
		
		// When
		centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoToCentrosDeTrabajoEntity(centrosDeTrabajo, centrosDeTrabajoEntity);
		
		// Then
		assertEquals(centrosDeTrabajo.getNombre(), centrosDeTrabajoEntity.getNombre());
		assertEquals(centrosDeTrabajo.getDescripcion(), centrosDeTrabajoEntity.getDescripcion());
		assertEquals(centrosDeTrabajo.getParking(), centrosDeTrabajoEntity.getParking());
		assertEquals(centrosDeTrabajo.getPiscina(), centrosDeTrabajoEntity.getPiscina());
		assertEquals(centrosDeTrabajo.getNumHabitaciones(), centrosDeTrabajoEntity.getNumHabitaciones());
		assertEquals(centrosDeTrabajo.getNumEstrellas(), centrosDeTrabajoEntity.getNumEstrellas());
		assertEquals(centrosDeTrabajo.getIdDireccion(), centrosDeTrabajoEntity.getDireccion().getIddireccion());
		assertEquals(centrosDeTrabajo.getIdAdministrador(), centrosDeTrabajoEntity.getAdministrador().getIdempleados());
	}

}