/*
 * Created on 31 oct 2015 ( Time 10:51:35 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.TurnosDeTrabajoHasDetallePlanilla;
import org.sun.resorts.holidays.model.jpa.TurnosDeTrabajoHasDetallePlanillaEntity;
import org.sun.resorts.holidays.model.jpa.TurnosDeTrabajoHasDetallePlanillaEntityKey;
import org.sun.resorts.holidays.persistence.service.mapping.TurnosDeTrabajoHasDetallePlanillaServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.TurnosDeTrabajoHasDetallePlanillaJpaRepository;
import org.sun.resorts.holidays.test.TurnosDeTrabajoHasDetallePlanillaFactoryForTest;
import org.sun.resorts.holidays.test.TurnosDeTrabajoHasDetallePlanillaEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TurnosDeTrabajoHasDetallePlanillaService
 */
@RunWith(MockitoJUnitRunner.class)
public class TurnosDeTrabajoHasDetallePlanillaServiceImplTest {

	@InjectMocks
	private TurnosDeTrabajoHasDetallePlanillaServiceImpl turnosDeTrabajoHasDetallePlanillaService;
	@Mock
	private TurnosDeTrabajoHasDetallePlanillaJpaRepository turnosDeTrabajoHasDetallePlanillaJpaRepository;
	@Mock
	private TurnosDeTrabajoHasDetallePlanillaServiceMapper turnosDeTrabajoHasDetallePlanillaServiceMapper;
	
	private TurnosDeTrabajoHasDetallePlanillaFactoryForTest turnosDeTrabajoHasDetallePlanillaFactoryForTest = new TurnosDeTrabajoHasDetallePlanillaFactoryForTest();

	private TurnosDeTrabajoHasDetallePlanillaEntityFactoryForTest turnosDeTrabajoHasDetallePlanillaEntityFactoryForTest = new TurnosDeTrabajoHasDetallePlanillaEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer turnosDeTrabajoIdturnosDeTrabajo = mockValues.nextInteger();
		Integer detallePlanillaIdDetalle = mockValues.nextInteger();
		
		TurnosDeTrabajoHasDetallePlanillaEntityKey turnosDeTrabajoHasDetallePlanillaEntityKey = new TurnosDeTrabajoHasDetallePlanillaEntityKey(turnosDeTrabajoIdturnosDeTrabajo, detallePlanillaIdDetalle);
		turnosDeTrabajoHasDetallePlanillaEntityKey.setTurnosDeTrabajoIdturnosDeTrabajo(turnosDeTrabajoIdturnosDeTrabajo);
		turnosDeTrabajoHasDetallePlanillaEntityKey.setDetallePlanillaIdDetalle(detallePlanillaIdDetalle);
		
		TurnosDeTrabajoHasDetallePlanillaEntity turnosDeTrabajoHasDetallePlanillaEntity = turnosDeTrabajoHasDetallePlanillaJpaRepository.findOne(turnosDeTrabajoHasDetallePlanillaEntityKey);
		
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanilla = turnosDeTrabajoHasDetallePlanillaFactoryForTest.newTurnosDeTrabajoHasDetallePlanilla();
		when(turnosDeTrabajoHasDetallePlanillaServiceMapper.mapTurnosDeTrabajoHasDetallePlanillaEntityToTurnosDeTrabajoHasDetallePlanilla(turnosDeTrabajoHasDetallePlanillaEntity)).thenReturn(turnosDeTrabajoHasDetallePlanilla);

		// When
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanillaFound = turnosDeTrabajoHasDetallePlanillaService.findById(turnosDeTrabajoIdturnosDeTrabajo, detallePlanillaIdDetalle);

		// Then
		assertEquals(turnosDeTrabajoHasDetallePlanilla.getTurnosDeTrabajoIdturnosDeTrabajo(),turnosDeTrabajoHasDetallePlanillaFound.getTurnosDeTrabajoIdturnosDeTrabajo());
		assertEquals(turnosDeTrabajoHasDetallePlanilla.getDetallePlanillaIdDetalle(),turnosDeTrabajoHasDetallePlanillaFound.getDetallePlanillaIdDetalle());
	}

	@Test
	public void findAll() {
		// Given
		List<TurnosDeTrabajoHasDetallePlanillaEntity> turnosDeTrabajoHasDetallePlanillaEntitys = new ArrayList<TurnosDeTrabajoHasDetallePlanillaEntity>();
		TurnosDeTrabajoHasDetallePlanillaEntity turnosDeTrabajoHasDetallePlanillaEntity1 = turnosDeTrabajoHasDetallePlanillaEntityFactoryForTest.newTurnosDeTrabajoHasDetallePlanillaEntity();
		turnosDeTrabajoHasDetallePlanillaEntitys.add(turnosDeTrabajoHasDetallePlanillaEntity1);
		TurnosDeTrabajoHasDetallePlanillaEntity turnosDeTrabajoHasDetallePlanillaEntity2 = turnosDeTrabajoHasDetallePlanillaEntityFactoryForTest.newTurnosDeTrabajoHasDetallePlanillaEntity();
		turnosDeTrabajoHasDetallePlanillaEntitys.add(turnosDeTrabajoHasDetallePlanillaEntity2);
		when(turnosDeTrabajoHasDetallePlanillaJpaRepository.findAll()).thenReturn(turnosDeTrabajoHasDetallePlanillaEntitys);
		
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanilla1 = turnosDeTrabajoHasDetallePlanillaFactoryForTest.newTurnosDeTrabajoHasDetallePlanilla();
		when(turnosDeTrabajoHasDetallePlanillaServiceMapper.mapTurnosDeTrabajoHasDetallePlanillaEntityToTurnosDeTrabajoHasDetallePlanilla(turnosDeTrabajoHasDetallePlanillaEntity1)).thenReturn(turnosDeTrabajoHasDetallePlanilla1);
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanilla2 = turnosDeTrabajoHasDetallePlanillaFactoryForTest.newTurnosDeTrabajoHasDetallePlanilla();
		when(turnosDeTrabajoHasDetallePlanillaServiceMapper.mapTurnosDeTrabajoHasDetallePlanillaEntityToTurnosDeTrabajoHasDetallePlanilla(turnosDeTrabajoHasDetallePlanillaEntity2)).thenReturn(turnosDeTrabajoHasDetallePlanilla2);

		// When
		List<TurnosDeTrabajoHasDetallePlanilla> turnosDeTrabajoHasDetallePlanillasFounds = turnosDeTrabajoHasDetallePlanillaService.findAll();

		// Then
		assertTrue(turnosDeTrabajoHasDetallePlanilla1 == turnosDeTrabajoHasDetallePlanillasFounds.get(0));
		assertTrue(turnosDeTrabajoHasDetallePlanilla2 == turnosDeTrabajoHasDetallePlanillasFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanilla = turnosDeTrabajoHasDetallePlanillaFactoryForTest.newTurnosDeTrabajoHasDetallePlanilla();

		TurnosDeTrabajoHasDetallePlanillaEntityKey id = new TurnosDeTrabajoHasDetallePlanillaEntityKey(turnosDeTrabajoHasDetallePlanilla.getTurnosDeTrabajoIdturnosDeTrabajo(), turnosDeTrabajoHasDetallePlanilla.getDetallePlanillaIdDetalle());
		TurnosDeTrabajoHasDetallePlanillaEntity turnosDeTrabajoHasDetallePlanillaEntity = turnosDeTrabajoHasDetallePlanillaEntityFactoryForTest.newTurnosDeTrabajoHasDetallePlanillaEntity();
		when(turnosDeTrabajoHasDetallePlanillaJpaRepository.findOne(id)).thenReturn(null);
		
		turnosDeTrabajoHasDetallePlanillaEntity = new TurnosDeTrabajoHasDetallePlanillaEntity();
		turnosDeTrabajoHasDetallePlanillaServiceMapper.mapTurnosDeTrabajoHasDetallePlanillaToTurnosDeTrabajoHasDetallePlanillaEntity(turnosDeTrabajoHasDetallePlanilla, turnosDeTrabajoHasDetallePlanillaEntity);
		TurnosDeTrabajoHasDetallePlanillaEntity turnosDeTrabajoHasDetallePlanillaEntitySaved = turnosDeTrabajoHasDetallePlanillaJpaRepository.save(turnosDeTrabajoHasDetallePlanillaEntity);
		
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanillaSaved = turnosDeTrabajoHasDetallePlanillaFactoryForTest.newTurnosDeTrabajoHasDetallePlanilla();
		when(turnosDeTrabajoHasDetallePlanillaServiceMapper.mapTurnosDeTrabajoHasDetallePlanillaEntityToTurnosDeTrabajoHasDetallePlanilla(turnosDeTrabajoHasDetallePlanillaEntitySaved)).thenReturn(turnosDeTrabajoHasDetallePlanillaSaved);

		// When
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanillaResult = turnosDeTrabajoHasDetallePlanillaService.create(turnosDeTrabajoHasDetallePlanilla);

		// Then
		assertTrue(turnosDeTrabajoHasDetallePlanillaResult == turnosDeTrabajoHasDetallePlanillaSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanilla = turnosDeTrabajoHasDetallePlanillaFactoryForTest.newTurnosDeTrabajoHasDetallePlanilla();

		TurnosDeTrabajoHasDetallePlanillaEntityKey id = new TurnosDeTrabajoHasDetallePlanillaEntityKey(turnosDeTrabajoHasDetallePlanilla.getTurnosDeTrabajoIdturnosDeTrabajo(), turnosDeTrabajoHasDetallePlanilla.getDetallePlanillaIdDetalle());
		TurnosDeTrabajoHasDetallePlanillaEntity turnosDeTrabajoHasDetallePlanillaEntity = turnosDeTrabajoHasDetallePlanillaEntityFactoryForTest.newTurnosDeTrabajoHasDetallePlanillaEntity();
		when(turnosDeTrabajoHasDetallePlanillaJpaRepository.findOne(id)).thenReturn(turnosDeTrabajoHasDetallePlanillaEntity);

		// When
		Exception exception = null;
		try {
			turnosDeTrabajoHasDetallePlanillaService.create(turnosDeTrabajoHasDetallePlanilla);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanilla = turnosDeTrabajoHasDetallePlanillaFactoryForTest.newTurnosDeTrabajoHasDetallePlanilla();

		TurnosDeTrabajoHasDetallePlanillaEntityKey id = new TurnosDeTrabajoHasDetallePlanillaEntityKey(turnosDeTrabajoHasDetallePlanilla.getTurnosDeTrabajoIdturnosDeTrabajo(), turnosDeTrabajoHasDetallePlanilla.getDetallePlanillaIdDetalle());
		TurnosDeTrabajoHasDetallePlanillaEntity turnosDeTrabajoHasDetallePlanillaEntity = turnosDeTrabajoHasDetallePlanillaEntityFactoryForTest.newTurnosDeTrabajoHasDetallePlanillaEntity();
		when(turnosDeTrabajoHasDetallePlanillaJpaRepository.findOne(id)).thenReturn(turnosDeTrabajoHasDetallePlanillaEntity);
		
		TurnosDeTrabajoHasDetallePlanillaEntity turnosDeTrabajoHasDetallePlanillaEntitySaved = turnosDeTrabajoHasDetallePlanillaEntityFactoryForTest.newTurnosDeTrabajoHasDetallePlanillaEntity();
		when(turnosDeTrabajoHasDetallePlanillaJpaRepository.save(turnosDeTrabajoHasDetallePlanillaEntity)).thenReturn(turnosDeTrabajoHasDetallePlanillaEntitySaved);
		
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanillaSaved = turnosDeTrabajoHasDetallePlanillaFactoryForTest.newTurnosDeTrabajoHasDetallePlanilla();
		when(turnosDeTrabajoHasDetallePlanillaServiceMapper.mapTurnosDeTrabajoHasDetallePlanillaEntityToTurnosDeTrabajoHasDetallePlanilla(turnosDeTrabajoHasDetallePlanillaEntitySaved)).thenReturn(turnosDeTrabajoHasDetallePlanillaSaved);

		// When
		TurnosDeTrabajoHasDetallePlanilla turnosDeTrabajoHasDetallePlanillaResult = turnosDeTrabajoHasDetallePlanillaService.update(turnosDeTrabajoHasDetallePlanilla);

		// Then
		verify(turnosDeTrabajoHasDetallePlanillaServiceMapper).mapTurnosDeTrabajoHasDetallePlanillaToTurnosDeTrabajoHasDetallePlanillaEntity(turnosDeTrabajoHasDetallePlanilla, turnosDeTrabajoHasDetallePlanillaEntity);
		assertTrue(turnosDeTrabajoHasDetallePlanillaResult == turnosDeTrabajoHasDetallePlanillaSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer turnosDeTrabajoIdturnosDeTrabajo = mockValues.nextInteger();
		Integer detallePlanillaIdDetalle = mockValues.nextInteger();
		TurnosDeTrabajoHasDetallePlanillaEntityKey turnosDeTrabajoHasDetallePlanillaEntityKey = new TurnosDeTrabajoHasDetallePlanillaEntityKey(turnosDeTrabajoIdturnosDeTrabajo, detallePlanillaIdDetalle);

		// When
		turnosDeTrabajoHasDetallePlanillaService.delete(turnosDeTrabajoIdturnosDeTrabajo, detallePlanillaIdDetalle);

		// Then
		verify(turnosDeTrabajoHasDetallePlanillaJpaRepository).delete(turnosDeTrabajoHasDetallePlanillaEntityKey);
		
	}

}
