/*
 * Created on 28 oct 2015 ( Time 21:40:11 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.TipoFecha;
import org.sun.resorts.holidays.model.jpa.TipoFechaEntity;
import java.util.List;
import org.sun.resorts.holidays.business.service.mapping.TipoFechaServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.TipoFechaJpaRepository;
import org.sun.resorts.holidays.test.TipoFechaFactoryForTest;
import org.sun.resorts.holidays.test.TipoFechaEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TipoFechaService
 */
@RunWith(MockitoJUnitRunner.class)
public class TipoFechaServiceImplTest {

	@InjectMocks
	private TipoFechaServiceImpl tipoFechaService;
	@Mock
	private TipoFechaJpaRepository tipoFechaJpaRepository;
	@Mock
	private TipoFechaServiceMapper tipoFechaServiceMapper;
	
	private TipoFechaFactoryForTest tipoFechaFactoryForTest = new TipoFechaFactoryForTest();

	private TipoFechaEntityFactoryForTest tipoFechaEntityFactoryForTest = new TipoFechaEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idtipoFecha = mockValues.nextInteger();
		
		TipoFechaEntity tipoFechaEntity = tipoFechaJpaRepository.findOne(idtipoFecha);
		
		TipoFecha tipoFecha = tipoFechaFactoryForTest.newTipoFecha();
		when(tipoFechaServiceMapper.mapTipoFechaEntityToTipoFecha(tipoFechaEntity)).thenReturn(tipoFecha);

		// When
		TipoFecha tipoFechaFound = tipoFechaService.findById(idtipoFecha);

		// Then
		assertEquals(tipoFecha.getIdtipoFecha(),tipoFechaFound.getIdtipoFecha());
	}

	@Test
	public void findAll() {
		// Given
		List<TipoFechaEntity> tipoFechaEntitys = new ArrayList<TipoFechaEntity>();
		TipoFechaEntity tipoFechaEntity1 = tipoFechaEntityFactoryForTest.newTipoFechaEntity();
		tipoFechaEntitys.add(tipoFechaEntity1);
		TipoFechaEntity tipoFechaEntity2 = tipoFechaEntityFactoryForTest.newTipoFechaEntity();
		tipoFechaEntitys.add(tipoFechaEntity2);
		when(tipoFechaJpaRepository.findAll()).thenReturn(tipoFechaEntitys);
		
		TipoFecha tipoFecha1 = tipoFechaFactoryForTest.newTipoFecha();
		when(tipoFechaServiceMapper.mapTipoFechaEntityToTipoFecha(tipoFechaEntity1)).thenReturn(tipoFecha1);
		TipoFecha tipoFecha2 = tipoFechaFactoryForTest.newTipoFecha();
		when(tipoFechaServiceMapper.mapTipoFechaEntityToTipoFecha(tipoFechaEntity2)).thenReturn(tipoFecha2);

		// When
		List<TipoFecha> tipoFechasFounds = tipoFechaService.findAll();

		// Then
		assertTrue(tipoFecha1 == tipoFechasFounds.get(0));
		assertTrue(tipoFecha2 == tipoFechasFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TipoFecha tipoFecha = tipoFechaFactoryForTest.newTipoFecha();

		TipoFechaEntity tipoFechaEntity = tipoFechaEntityFactoryForTest.newTipoFechaEntity();
		when(tipoFechaJpaRepository.findOne(tipoFecha.getIdtipoFecha())).thenReturn(null);
		
		tipoFechaEntity = new TipoFechaEntity();
		tipoFechaServiceMapper.mapTipoFechaToTipoFechaEntity(tipoFecha, tipoFechaEntity);
		TipoFechaEntity tipoFechaEntitySaved = tipoFechaJpaRepository.save(tipoFechaEntity);
		
		TipoFecha tipoFechaSaved = tipoFechaFactoryForTest.newTipoFecha();
		when(tipoFechaServiceMapper.mapTipoFechaEntityToTipoFecha(tipoFechaEntitySaved)).thenReturn(tipoFechaSaved);

		// When
		TipoFecha tipoFechaResult = tipoFechaService.create(tipoFecha);

		// Then
		assertTrue(tipoFechaResult == tipoFechaSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TipoFecha tipoFecha = tipoFechaFactoryForTest.newTipoFecha();

		TipoFechaEntity tipoFechaEntity = tipoFechaEntityFactoryForTest.newTipoFechaEntity();
		when(tipoFechaJpaRepository.findOne(tipoFecha.getIdtipoFecha())).thenReturn(tipoFechaEntity);

		// When
		Exception exception = null;
		try {
			tipoFechaService.create(tipoFecha);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TipoFecha tipoFecha = tipoFechaFactoryForTest.newTipoFecha();

		TipoFechaEntity tipoFechaEntity = tipoFechaEntityFactoryForTest.newTipoFechaEntity();
		when(tipoFechaJpaRepository.findOne(tipoFecha.getIdtipoFecha())).thenReturn(tipoFechaEntity);
		
		TipoFechaEntity tipoFechaEntitySaved = tipoFechaEntityFactoryForTest.newTipoFechaEntity();
		when(tipoFechaJpaRepository.save(tipoFechaEntity)).thenReturn(tipoFechaEntitySaved);
		
		TipoFecha tipoFechaSaved = tipoFechaFactoryForTest.newTipoFecha();
		when(tipoFechaServiceMapper.mapTipoFechaEntityToTipoFecha(tipoFechaEntitySaved)).thenReturn(tipoFechaSaved);

		// When
		TipoFecha tipoFechaResult = tipoFechaService.update(tipoFecha);

		// Then
		verify(tipoFechaServiceMapper).mapTipoFechaToTipoFechaEntity(tipoFecha, tipoFechaEntity);
		assertTrue(tipoFechaResult == tipoFechaSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idtipoFecha = mockValues.nextInteger();

		// When
		tipoFechaService.delete(idtipoFecha);

		// Then
		verify(tipoFechaJpaRepository).delete(idtipoFecha);
		
	}

}
