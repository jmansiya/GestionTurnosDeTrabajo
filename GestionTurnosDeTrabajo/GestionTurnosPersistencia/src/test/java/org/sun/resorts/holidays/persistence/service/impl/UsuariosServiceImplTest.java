/*
 * Created on 31 oct 2015 ( Time 10:51:35 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.Usuarios;
import org.sun.resorts.holidays.model.jpa.UsuariosEntity;
import org.sun.resorts.holidays.persistence.service.mapping.UsuariosServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.UsuariosJpaRepository;
import org.sun.resorts.holidays.test.UsuariosFactoryForTest;
import org.sun.resorts.holidays.test.UsuariosEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of UsuariosService
 */
@RunWith(MockitoJUnitRunner.class)
public class UsuariosServiceImplTest {

	@InjectMocks
	private UsuariosServiceImpl usuariosService;
	@Mock
	private UsuariosJpaRepository usuariosJpaRepository;
	@Mock
	private UsuariosServiceMapper usuariosServiceMapper;
	
	private UsuariosFactoryForTest usuariosFactoryForTest = new UsuariosFactoryForTest();

	private UsuariosEntityFactoryForTest usuariosEntityFactoryForTest = new UsuariosEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idusuarios = mockValues.nextInteger();
		
		UsuariosEntity usuariosEntity = usuariosJpaRepository.findOne(idusuarios);
		
		Usuarios usuarios = usuariosFactoryForTest.newUsuarios();
		when(usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntity)).thenReturn(usuarios);

		// When
		Usuarios usuariosFound = usuariosService.findById(idusuarios);

		// Then
		assertEquals(usuarios.getIdusuarios(),usuariosFound.getIdusuarios());
	}

	@Test
	public void findAll() {
		// Given
		List<UsuariosEntity> usuariosEntitys = new ArrayList<UsuariosEntity>();
		UsuariosEntity usuariosEntity1 = usuariosEntityFactoryForTest.newUsuariosEntity();
		usuariosEntitys.add(usuariosEntity1);
		UsuariosEntity usuariosEntity2 = usuariosEntityFactoryForTest.newUsuariosEntity();
		usuariosEntitys.add(usuariosEntity2);
		when(usuariosJpaRepository.findAll()).thenReturn(usuariosEntitys);
		
		Usuarios usuarios1 = usuariosFactoryForTest.newUsuarios();
		when(usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntity1)).thenReturn(usuarios1);
		Usuarios usuarios2 = usuariosFactoryForTest.newUsuarios();
		when(usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntity2)).thenReturn(usuarios2);

		// When
		List<Usuarios> usuariossFounds = usuariosService.findAll();

		// Then
		assertTrue(usuarios1 == usuariossFounds.get(0));
		assertTrue(usuarios2 == usuariossFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Usuarios usuarios = usuariosFactoryForTest.newUsuarios();

		UsuariosEntity usuariosEntity = usuariosEntityFactoryForTest.newUsuariosEntity();
		when(usuariosJpaRepository.findOne(usuarios.getIdusuarios())).thenReturn(null);
		
		usuariosEntity = new UsuariosEntity();
		usuariosServiceMapper.mapUsuariosToUsuariosEntity(usuarios, usuariosEntity);
		UsuariosEntity usuariosEntitySaved = usuariosJpaRepository.save(usuariosEntity);
		
		Usuarios usuariosSaved = usuariosFactoryForTest.newUsuarios();
		when(usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntitySaved)).thenReturn(usuariosSaved);

		// When
		Usuarios usuariosResult = usuariosService.create(usuarios);

		// Then
		assertTrue(usuariosResult == usuariosSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Usuarios usuarios = usuariosFactoryForTest.newUsuarios();

		UsuariosEntity usuariosEntity = usuariosEntityFactoryForTest.newUsuariosEntity();
		when(usuariosJpaRepository.findOne(usuarios.getIdusuarios())).thenReturn(usuariosEntity);

		// When
		Exception exception = null;
		try {
			usuariosService.create(usuarios);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Usuarios usuarios = usuariosFactoryForTest.newUsuarios();

		UsuariosEntity usuariosEntity = usuariosEntityFactoryForTest.newUsuariosEntity();
		when(usuariosJpaRepository.findOne(usuarios.getIdusuarios())).thenReturn(usuariosEntity);
		
		UsuariosEntity usuariosEntitySaved = usuariosEntityFactoryForTest.newUsuariosEntity();
		when(usuariosJpaRepository.save(usuariosEntity)).thenReturn(usuariosEntitySaved);
		
		Usuarios usuariosSaved = usuariosFactoryForTest.newUsuarios();
		when(usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntitySaved)).thenReturn(usuariosSaved);

		// When
		Usuarios usuariosResult = usuariosService.update(usuarios);

		// Then
		verify(usuariosServiceMapper).mapUsuariosToUsuariosEntity(usuarios, usuariosEntity);
		assertTrue(usuariosResult == usuariosSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idusuarios = mockValues.nextInteger();

		// When
		usuariosService.delete(idusuarios);

		// Then
		verify(usuariosJpaRepository).delete(idusuarios);
		
	}

}
