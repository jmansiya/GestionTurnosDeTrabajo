/*
 * Created on 28 oct 2015 ( Time 21:40:10 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.Planillas;
import org.sun.resorts.holidays.model.jpa.PlanillasEntity;
import java.util.Date;
import java.util.List;
import org.sun.resorts.holidays.business.service.mapping.PlanillasServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.PlanillasJpaRepository;
import org.sun.resorts.holidays.test.PlanillasFactoryForTest;
import org.sun.resorts.holidays.test.PlanillasEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PlanillasService
 */
@RunWith(MockitoJUnitRunner.class)
public class PlanillasServiceImplTest {

	@InjectMocks
	private PlanillasServiceImpl planillasService;
	@Mock
	private PlanillasJpaRepository planillasJpaRepository;
	@Mock
	private PlanillasServiceMapper planillasServiceMapper;
	
	private PlanillasFactoryForTest planillasFactoryForTest = new PlanillasFactoryForTest();

	private PlanillasEntityFactoryForTest planillasEntityFactoryForTest = new PlanillasEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idplanillas = mockValues.nextInteger();
		
		PlanillasEntity planillasEntity = planillasJpaRepository.findOne(idplanillas);
		
		Planillas planillas = planillasFactoryForTest.newPlanillas();
		when(planillasServiceMapper.mapPlanillasEntityToPlanillas(planillasEntity)).thenReturn(planillas);

		// When
		Planillas planillasFound = planillasService.findById(idplanillas);

		// Then
		assertEquals(planillas.getIdplanillas(),planillasFound.getIdplanillas());
	}

	@Test
	public void findAll() {
		// Given
		List<PlanillasEntity> planillasEntitys = new ArrayList<PlanillasEntity>();
		PlanillasEntity planillasEntity1 = planillasEntityFactoryForTest.newPlanillasEntity();
		planillasEntitys.add(planillasEntity1);
		PlanillasEntity planillasEntity2 = planillasEntityFactoryForTest.newPlanillasEntity();
		planillasEntitys.add(planillasEntity2);
		when(planillasJpaRepository.findAll()).thenReturn(planillasEntitys);
		
		Planillas planillas1 = planillasFactoryForTest.newPlanillas();
		when(planillasServiceMapper.mapPlanillasEntityToPlanillas(planillasEntity1)).thenReturn(planillas1);
		Planillas planillas2 = planillasFactoryForTest.newPlanillas();
		when(planillasServiceMapper.mapPlanillasEntityToPlanillas(planillasEntity2)).thenReturn(planillas2);

		// When
		List<Planillas> planillassFounds = planillasService.findAll();

		// Then
		assertTrue(planillas1 == planillassFounds.get(0));
		assertTrue(planillas2 == planillassFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Planillas planillas = planillasFactoryForTest.newPlanillas();

		PlanillasEntity planillasEntity = planillasEntityFactoryForTest.newPlanillasEntity();
		when(planillasJpaRepository.findOne(planillas.getIdplanillas())).thenReturn(null);
		
		planillasEntity = new PlanillasEntity();
		planillasServiceMapper.mapPlanillasToPlanillasEntity(planillas, planillasEntity);
		PlanillasEntity planillasEntitySaved = planillasJpaRepository.save(planillasEntity);
		
		Planillas planillasSaved = planillasFactoryForTest.newPlanillas();
		when(planillasServiceMapper.mapPlanillasEntityToPlanillas(planillasEntitySaved)).thenReturn(planillasSaved);

		// When
		Planillas planillasResult = planillasService.create(planillas);

		// Then
		assertTrue(planillasResult == planillasSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Planillas planillas = planillasFactoryForTest.newPlanillas();

		PlanillasEntity planillasEntity = planillasEntityFactoryForTest.newPlanillasEntity();
		when(planillasJpaRepository.findOne(planillas.getIdplanillas())).thenReturn(planillasEntity);

		// When
		Exception exception = null;
		try {
			planillasService.create(planillas);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Planillas planillas = planillasFactoryForTest.newPlanillas();

		PlanillasEntity planillasEntity = planillasEntityFactoryForTest.newPlanillasEntity();
		when(planillasJpaRepository.findOne(planillas.getIdplanillas())).thenReturn(planillasEntity);
		
		PlanillasEntity planillasEntitySaved = planillasEntityFactoryForTest.newPlanillasEntity();
		when(planillasJpaRepository.save(planillasEntity)).thenReturn(planillasEntitySaved);
		
		Planillas planillasSaved = planillasFactoryForTest.newPlanillas();
		when(planillasServiceMapper.mapPlanillasEntityToPlanillas(planillasEntitySaved)).thenReturn(planillasSaved);

		// When
		Planillas planillasResult = planillasService.update(planillas);

		// Then
		verify(planillasServiceMapper).mapPlanillasToPlanillasEntity(planillas, planillasEntity);
		assertTrue(planillasResult == planillasSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idplanillas = mockValues.nextInteger();

		// When
		planillasService.delete(idplanillas);

		// Then
		verify(planillasJpaRepository).delete(idplanillas);
		
	}

}
