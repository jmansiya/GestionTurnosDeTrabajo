/*
 * Created on 28 oct 2015 ( Time 22:07:20 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.CentrosDeTrabajo;
import org.sun.resorts.holidays.model.jpa.CentrosDeTrabajoEntity;
import java.util.List;
import org.sun.resorts.holidays.business.service.mapping.CentrosDeTrabajoServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.CentrosDeTrabajoJpaRepository;
import org.sun.resorts.holidays.test.CentrosDeTrabajoFactoryForTest;
import org.sun.resorts.holidays.test.CentrosDeTrabajoEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of CentrosDeTrabajoService
 */
@RunWith(MockitoJUnitRunner.class)
public class CentrosDeTrabajoServiceImplTest {

	@InjectMocks
	private CentrosDeTrabajoServiceImpl centrosDeTrabajoService;
	@Mock
	private CentrosDeTrabajoJpaRepository centrosDeTrabajoJpaRepository;
	@Mock
	private CentrosDeTrabajoServiceMapper centrosDeTrabajoServiceMapper;
	
	private CentrosDeTrabajoFactoryForTest centrosDeTrabajoFactoryForTest = new CentrosDeTrabajoFactoryForTest();

	private CentrosDeTrabajoEntityFactoryForTest centrosDeTrabajoEntityFactoryForTest = new CentrosDeTrabajoEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idcentrosDeTrabajo = mockValues.nextInteger();
		
		CentrosDeTrabajoEntity centrosDeTrabajoEntity = centrosDeTrabajoJpaRepository.findOne(idcentrosDeTrabajo);
		
		CentrosDeTrabajo centrosDeTrabajo = centrosDeTrabajoFactoryForTest.newCentrosDeTrabajo();
		when(centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntity)).thenReturn(centrosDeTrabajo);

		// When
		CentrosDeTrabajo centrosDeTrabajoFound = centrosDeTrabajoService.findById(idcentrosDeTrabajo);

		// Then
		assertEquals(centrosDeTrabajo.getIdcentrosDeTrabajo(),centrosDeTrabajoFound.getIdcentrosDeTrabajo());
	}

	@Test
	public void findAll() {
		// Given
		List<CentrosDeTrabajoEntity> centrosDeTrabajoEntitys = new ArrayList<CentrosDeTrabajoEntity>();
		CentrosDeTrabajoEntity centrosDeTrabajoEntity1 = centrosDeTrabajoEntityFactoryForTest.newCentrosDeTrabajoEntity();
		centrosDeTrabajoEntitys.add(centrosDeTrabajoEntity1);
		CentrosDeTrabajoEntity centrosDeTrabajoEntity2 = centrosDeTrabajoEntityFactoryForTest.newCentrosDeTrabajoEntity();
		centrosDeTrabajoEntitys.add(centrosDeTrabajoEntity2);
		when(centrosDeTrabajoJpaRepository.findAll()).thenReturn(centrosDeTrabajoEntitys);
		
		CentrosDeTrabajo centrosDeTrabajo1 = centrosDeTrabajoFactoryForTest.newCentrosDeTrabajo();
		when(centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntity1)).thenReturn(centrosDeTrabajo1);
		CentrosDeTrabajo centrosDeTrabajo2 = centrosDeTrabajoFactoryForTest.newCentrosDeTrabajo();
		when(centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntity2)).thenReturn(centrosDeTrabajo2);

		// When
		List<CentrosDeTrabajo> centrosDeTrabajosFounds = centrosDeTrabajoService.findAll();

		// Then
		assertTrue(centrosDeTrabajo1 == centrosDeTrabajosFounds.get(0));
		assertTrue(centrosDeTrabajo2 == centrosDeTrabajosFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		CentrosDeTrabajo centrosDeTrabajo = centrosDeTrabajoFactoryForTest.newCentrosDeTrabajo();

		CentrosDeTrabajoEntity centrosDeTrabajoEntity = centrosDeTrabajoEntityFactoryForTest.newCentrosDeTrabajoEntity();
		when(centrosDeTrabajoJpaRepository.findOne(centrosDeTrabajo.getIdcentrosDeTrabajo())).thenReturn(null);
		
		centrosDeTrabajoEntity = new CentrosDeTrabajoEntity();
		centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoToCentrosDeTrabajoEntity(centrosDeTrabajo, centrosDeTrabajoEntity);
		CentrosDeTrabajoEntity centrosDeTrabajoEntitySaved = centrosDeTrabajoJpaRepository.save(centrosDeTrabajoEntity);
		
		CentrosDeTrabajo centrosDeTrabajoSaved = centrosDeTrabajoFactoryForTest.newCentrosDeTrabajo();
		when(centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntitySaved)).thenReturn(centrosDeTrabajoSaved);

		// When
		CentrosDeTrabajo centrosDeTrabajoResult = centrosDeTrabajoService.create(centrosDeTrabajo);

		// Then
		assertTrue(centrosDeTrabajoResult == centrosDeTrabajoSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		CentrosDeTrabajo centrosDeTrabajo = centrosDeTrabajoFactoryForTest.newCentrosDeTrabajo();

		CentrosDeTrabajoEntity centrosDeTrabajoEntity = centrosDeTrabajoEntityFactoryForTest.newCentrosDeTrabajoEntity();
		when(centrosDeTrabajoJpaRepository.findOne(centrosDeTrabajo.getIdcentrosDeTrabajo())).thenReturn(centrosDeTrabajoEntity);

		// When
		Exception exception = null;
		try {
			centrosDeTrabajoService.create(centrosDeTrabajo);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		CentrosDeTrabajo centrosDeTrabajo = centrosDeTrabajoFactoryForTest.newCentrosDeTrabajo();

		CentrosDeTrabajoEntity centrosDeTrabajoEntity = centrosDeTrabajoEntityFactoryForTest.newCentrosDeTrabajoEntity();
		when(centrosDeTrabajoJpaRepository.findOne(centrosDeTrabajo.getIdcentrosDeTrabajo())).thenReturn(centrosDeTrabajoEntity);
		
		CentrosDeTrabajoEntity centrosDeTrabajoEntitySaved = centrosDeTrabajoEntityFactoryForTest.newCentrosDeTrabajoEntity();
		when(centrosDeTrabajoJpaRepository.save(centrosDeTrabajoEntity)).thenReturn(centrosDeTrabajoEntitySaved);
		
		CentrosDeTrabajo centrosDeTrabajoSaved = centrosDeTrabajoFactoryForTest.newCentrosDeTrabajo();
		when(centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntitySaved)).thenReturn(centrosDeTrabajoSaved);

		// When
		CentrosDeTrabajo centrosDeTrabajoResult = centrosDeTrabajoService.update(centrosDeTrabajo);

		// Then
		verify(centrosDeTrabajoServiceMapper).mapCentrosDeTrabajoToCentrosDeTrabajoEntity(centrosDeTrabajo, centrosDeTrabajoEntity);
		assertTrue(centrosDeTrabajoResult == centrosDeTrabajoSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idcentrosDeTrabajo = mockValues.nextInteger();

		// When
		centrosDeTrabajoService.delete(idcentrosDeTrabajo);

		// Then
		verify(centrosDeTrabajoJpaRepository).delete(idcentrosDeTrabajo);
		
	}

}
