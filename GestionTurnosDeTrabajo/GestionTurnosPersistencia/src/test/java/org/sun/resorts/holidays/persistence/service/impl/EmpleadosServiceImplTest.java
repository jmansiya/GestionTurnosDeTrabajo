/*
 * Created on 31 oct 2015 ( Time 10:51:34 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.Empleados;
import org.sun.resorts.holidays.model.jpa.EmpleadosEntity;
import java.util.Date;
import java.util.List;
import org.sun.resorts.holidays.persistence.service.mapping.EmpleadosServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.EmpleadosJpaRepository;
import org.sun.resorts.holidays.test.EmpleadosFactoryForTest;
import org.sun.resorts.holidays.test.EmpleadosEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of EmpleadosService
 */
@RunWith(MockitoJUnitRunner.class)
public class EmpleadosServiceImplTest {

	@InjectMocks
	private EmpleadosServiceImpl empleadosService;
	@Mock
	private EmpleadosJpaRepository empleadosJpaRepository;
	@Mock
	private EmpleadosServiceMapper empleadosServiceMapper;
	
	private EmpleadosFactoryForTest empleadosFactoryForTest = new EmpleadosFactoryForTest();

	private EmpleadosEntityFactoryForTest empleadosEntityFactoryForTest = new EmpleadosEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idempleados = mockValues.nextInteger();
		
		EmpleadosEntity empleadosEntity = empleadosJpaRepository.findOne(idempleados);
		
		Empleados empleados = empleadosFactoryForTest.newEmpleados();
		when(empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntity)).thenReturn(empleados);

		// When
		Empleados empleadosFound = empleadosService.findById(idempleados);

		// Then
		assertEquals(empleados.getIdempleados(),empleadosFound.getIdempleados());
	}

	@Test
	public void findAll() {
		// Given
		List<EmpleadosEntity> empleadosEntitys = new ArrayList<EmpleadosEntity>();
		EmpleadosEntity empleadosEntity1 = empleadosEntityFactoryForTest.newEmpleadosEntity();
		empleadosEntitys.add(empleadosEntity1);
		EmpleadosEntity empleadosEntity2 = empleadosEntityFactoryForTest.newEmpleadosEntity();
		empleadosEntitys.add(empleadosEntity2);
		when(empleadosJpaRepository.findAll()).thenReturn(empleadosEntitys);
		
		Empleados empleados1 = empleadosFactoryForTest.newEmpleados();
		when(empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntity1)).thenReturn(empleados1);
		Empleados empleados2 = empleadosFactoryForTest.newEmpleados();
		when(empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntity2)).thenReturn(empleados2);

		// When
		List<Empleados> empleadossFounds = empleadosService.findAll();

		// Then
		assertTrue(empleados1 == empleadossFounds.get(0));
		assertTrue(empleados2 == empleadossFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Empleados empleados = empleadosFactoryForTest.newEmpleados();

		EmpleadosEntity empleadosEntity = empleadosEntityFactoryForTest.newEmpleadosEntity();
		when(empleadosJpaRepository.findOne(empleados.getIdempleados())).thenReturn(null);
		
		empleadosEntity = new EmpleadosEntity();
		empleadosServiceMapper.mapEmpleadosToEmpleadosEntity(empleados, empleadosEntity);
		EmpleadosEntity empleadosEntitySaved = empleadosJpaRepository.save(empleadosEntity);
		
		Empleados empleadosSaved = empleadosFactoryForTest.newEmpleados();
		when(empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntitySaved)).thenReturn(empleadosSaved);

		// When
		Empleados empleadosResult = empleadosService.create(empleados);

		// Then
		assertTrue(empleadosResult == empleadosSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Empleados empleados = empleadosFactoryForTest.newEmpleados();

		EmpleadosEntity empleadosEntity = empleadosEntityFactoryForTest.newEmpleadosEntity();
		when(empleadosJpaRepository.findOne(empleados.getIdempleados())).thenReturn(empleadosEntity);

		// When
		Exception exception = null;
		try {
			empleadosService.create(empleados);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Empleados empleados = empleadosFactoryForTest.newEmpleados();

		EmpleadosEntity empleadosEntity = empleadosEntityFactoryForTest.newEmpleadosEntity();
		when(empleadosJpaRepository.findOne(empleados.getIdempleados())).thenReturn(empleadosEntity);
		
		EmpleadosEntity empleadosEntitySaved = empleadosEntityFactoryForTest.newEmpleadosEntity();
		when(empleadosJpaRepository.save(empleadosEntity)).thenReturn(empleadosEntitySaved);
		
		Empleados empleadosSaved = empleadosFactoryForTest.newEmpleados();
		when(empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntitySaved)).thenReturn(empleadosSaved);

		// When
		Empleados empleadosResult = empleadosService.update(empleados);

		// Then
		verify(empleadosServiceMapper).mapEmpleadosToEmpleadosEntity(empleados, empleadosEntity);
		assertTrue(empleadosResult == empleadosSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idempleados = mockValues.nextInteger();

		// When
		empleadosService.delete(idempleados);

		// Then
		verify(empleadosJpaRepository).delete(idempleados);
		
	}

}
