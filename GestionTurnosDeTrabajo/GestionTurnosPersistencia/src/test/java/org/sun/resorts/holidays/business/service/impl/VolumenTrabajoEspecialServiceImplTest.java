/*
 * Created on 28 oct 2015 ( Time 21:40:11 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.VolumenTrabajoEspecial;
import org.sun.resorts.holidays.model.jpa.VolumenTrabajoEspecialEntity;
import java.util.Date;
import java.util.List;
import org.sun.resorts.holidays.business.service.mapping.VolumenTrabajoEspecialServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.VolumenTrabajoEspecialJpaRepository;
import org.sun.resorts.holidays.test.VolumenTrabajoEspecialFactoryForTest;
import org.sun.resorts.holidays.test.VolumenTrabajoEspecialEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of VolumenTrabajoEspecialService
 */
@RunWith(MockitoJUnitRunner.class)
public class VolumenTrabajoEspecialServiceImplTest {

	@InjectMocks
	private VolumenTrabajoEspecialServiceImpl volumenTrabajoEspecialService;
	@Mock
	private VolumenTrabajoEspecialJpaRepository volumenTrabajoEspecialJpaRepository;
	@Mock
	private VolumenTrabajoEspecialServiceMapper volumenTrabajoEspecialServiceMapper;
	
	private VolumenTrabajoEspecialFactoryForTest volumenTrabajoEspecialFactoryForTest = new VolumenTrabajoEspecialFactoryForTest();

	private VolumenTrabajoEspecialEntityFactoryForTest volumenTrabajoEspecialEntityFactoryForTest = new VolumenTrabajoEspecialEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idvolumen = mockValues.nextInteger();
		
		VolumenTrabajoEspecialEntity volumenTrabajoEspecialEntity = volumenTrabajoEspecialJpaRepository.findOne(idvolumen);
		
		VolumenTrabajoEspecial volumenTrabajoEspecial = volumenTrabajoEspecialFactoryForTest.newVolumenTrabajoEspecial();
		when(volumenTrabajoEspecialServiceMapper.mapVolumenTrabajoEspecialEntityToVolumenTrabajoEspecial(volumenTrabajoEspecialEntity)).thenReturn(volumenTrabajoEspecial);

		// When
		VolumenTrabajoEspecial volumenTrabajoEspecialFound = volumenTrabajoEspecialService.findById(idvolumen);

		// Then
		assertEquals(volumenTrabajoEspecial.getIdvolumen(),volumenTrabajoEspecialFound.getIdvolumen());
	}

	@Test
	public void findAll() {
		// Given
		List<VolumenTrabajoEspecialEntity> volumenTrabajoEspecialEntitys = new ArrayList<VolumenTrabajoEspecialEntity>();
		VolumenTrabajoEspecialEntity volumenTrabajoEspecialEntity1 = volumenTrabajoEspecialEntityFactoryForTest.newVolumenTrabajoEspecialEntity();
		volumenTrabajoEspecialEntitys.add(volumenTrabajoEspecialEntity1);
		VolumenTrabajoEspecialEntity volumenTrabajoEspecialEntity2 = volumenTrabajoEspecialEntityFactoryForTest.newVolumenTrabajoEspecialEntity();
		volumenTrabajoEspecialEntitys.add(volumenTrabajoEspecialEntity2);
		when(volumenTrabajoEspecialJpaRepository.findAll()).thenReturn(volumenTrabajoEspecialEntitys);
		
		VolumenTrabajoEspecial volumenTrabajoEspecial1 = volumenTrabajoEspecialFactoryForTest.newVolumenTrabajoEspecial();
		when(volumenTrabajoEspecialServiceMapper.mapVolumenTrabajoEspecialEntityToVolumenTrabajoEspecial(volumenTrabajoEspecialEntity1)).thenReturn(volumenTrabajoEspecial1);
		VolumenTrabajoEspecial volumenTrabajoEspecial2 = volumenTrabajoEspecialFactoryForTest.newVolumenTrabajoEspecial();
		when(volumenTrabajoEspecialServiceMapper.mapVolumenTrabajoEspecialEntityToVolumenTrabajoEspecial(volumenTrabajoEspecialEntity2)).thenReturn(volumenTrabajoEspecial2);

		// When
		List<VolumenTrabajoEspecial> volumenTrabajoEspecialsFounds = volumenTrabajoEspecialService.findAll();

		// Then
		assertTrue(volumenTrabajoEspecial1 == volumenTrabajoEspecialsFounds.get(0));
		assertTrue(volumenTrabajoEspecial2 == volumenTrabajoEspecialsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		VolumenTrabajoEspecial volumenTrabajoEspecial = volumenTrabajoEspecialFactoryForTest.newVolumenTrabajoEspecial();

		VolumenTrabajoEspecialEntity volumenTrabajoEspecialEntity = volumenTrabajoEspecialEntityFactoryForTest.newVolumenTrabajoEspecialEntity();
		when(volumenTrabajoEspecialJpaRepository.findOne(volumenTrabajoEspecial.getIdvolumen())).thenReturn(null);
		
		volumenTrabajoEspecialEntity = new VolumenTrabajoEspecialEntity();
		volumenTrabajoEspecialServiceMapper.mapVolumenTrabajoEspecialToVolumenTrabajoEspecialEntity(volumenTrabajoEspecial, volumenTrabajoEspecialEntity);
		VolumenTrabajoEspecialEntity volumenTrabajoEspecialEntitySaved = volumenTrabajoEspecialJpaRepository.save(volumenTrabajoEspecialEntity);
		
		VolumenTrabajoEspecial volumenTrabajoEspecialSaved = volumenTrabajoEspecialFactoryForTest.newVolumenTrabajoEspecial();
		when(volumenTrabajoEspecialServiceMapper.mapVolumenTrabajoEspecialEntityToVolumenTrabajoEspecial(volumenTrabajoEspecialEntitySaved)).thenReturn(volumenTrabajoEspecialSaved);

		// When
		VolumenTrabajoEspecial volumenTrabajoEspecialResult = volumenTrabajoEspecialService.create(volumenTrabajoEspecial);

		// Then
		assertTrue(volumenTrabajoEspecialResult == volumenTrabajoEspecialSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		VolumenTrabajoEspecial volumenTrabajoEspecial = volumenTrabajoEspecialFactoryForTest.newVolumenTrabajoEspecial();

		VolumenTrabajoEspecialEntity volumenTrabajoEspecialEntity = volumenTrabajoEspecialEntityFactoryForTest.newVolumenTrabajoEspecialEntity();
		when(volumenTrabajoEspecialJpaRepository.findOne(volumenTrabajoEspecial.getIdvolumen())).thenReturn(volumenTrabajoEspecialEntity);

		// When
		Exception exception = null;
		try {
			volumenTrabajoEspecialService.create(volumenTrabajoEspecial);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		VolumenTrabajoEspecial volumenTrabajoEspecial = volumenTrabajoEspecialFactoryForTest.newVolumenTrabajoEspecial();

		VolumenTrabajoEspecialEntity volumenTrabajoEspecialEntity = volumenTrabajoEspecialEntityFactoryForTest.newVolumenTrabajoEspecialEntity();
		when(volumenTrabajoEspecialJpaRepository.findOne(volumenTrabajoEspecial.getIdvolumen())).thenReturn(volumenTrabajoEspecialEntity);
		
		VolumenTrabajoEspecialEntity volumenTrabajoEspecialEntitySaved = volumenTrabajoEspecialEntityFactoryForTest.newVolumenTrabajoEspecialEntity();
		when(volumenTrabajoEspecialJpaRepository.save(volumenTrabajoEspecialEntity)).thenReturn(volumenTrabajoEspecialEntitySaved);
		
		VolumenTrabajoEspecial volumenTrabajoEspecialSaved = volumenTrabajoEspecialFactoryForTest.newVolumenTrabajoEspecial();
		when(volumenTrabajoEspecialServiceMapper.mapVolumenTrabajoEspecialEntityToVolumenTrabajoEspecial(volumenTrabajoEspecialEntitySaved)).thenReturn(volumenTrabajoEspecialSaved);

		// When
		VolumenTrabajoEspecial volumenTrabajoEspecialResult = volumenTrabajoEspecialService.update(volumenTrabajoEspecial);

		// Then
		verify(volumenTrabajoEspecialServiceMapper).mapVolumenTrabajoEspecialToVolumenTrabajoEspecialEntity(volumenTrabajoEspecial, volumenTrabajoEspecialEntity);
		assertTrue(volumenTrabajoEspecialResult == volumenTrabajoEspecialSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idvolumen = mockValues.nextInteger();

		// When
		volumenTrabajoEspecialService.delete(idvolumen);

		// Then
		verify(volumenTrabajoEspecialJpaRepository).delete(idvolumen);
		
	}

}
