/*
 * Created on 31 oct 2015 ( Time 10:51:35 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.sun.resorts.holidays.model.TurnosDeTrabajo;
import org.sun.resorts.holidays.model.jpa.TurnosDeTrabajoEntity;
import org.sun.resorts.holidays.model.jpa.PuestoDeTrabajoEntity;
import org.sun.resorts.holidays.model.jpa.TurnosDeTrabajoEntity;
import org.sun.resorts.holidays.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TurnosDeTrabajoServiceMapperTest {

	private TurnosDeTrabajoServiceMapper turnosDeTrabajoServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		turnosDeTrabajoServiceMapper = new TurnosDeTrabajoServiceMapper();
		turnosDeTrabajoServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TurnosDeTrabajoEntity' to 'TurnosDeTrabajo'
	 * @param turnosDeTrabajoEntity
	 */
	@Test
	public void testMapTurnosDeTrabajoEntityToTurnosDeTrabajo() {
		// Given
		TurnosDeTrabajoEntity turnosDeTrabajoEntity = new TurnosDeTrabajoEntity();
		turnosDeTrabajoEntity.setNombre(mockValues.nextString(45));
		turnosDeTrabajoEntity.setDescripcion(mockValues.nextString(65));
		turnosDeTrabajoEntity.setTurnoRotatorio(mockValues.nextBoolean());
		turnosDeTrabajoEntity.setPuestoDeTrabajo(new PuestoDeTrabajoEntity());
		turnosDeTrabajoEntity.getPuestoDeTrabajo().setIdpuestoDeTrabajo(mockValues.nextInteger());
		turnosDeTrabajoEntity.setTurnosDeTrabajo(new TurnosDeTrabajoEntity());
		turnosDeTrabajoEntity.getTurnosDeTrabajo().setIdturnosDeTrabajo(mockValues.nextInteger());
		
		// When
		TurnosDeTrabajo turnosDeTrabajo = turnosDeTrabajoServiceMapper.mapTurnosDeTrabajoEntityToTurnosDeTrabajo(turnosDeTrabajoEntity);
		
		// Then
		assertEquals(turnosDeTrabajoEntity.getNombre(), turnosDeTrabajo.getNombre());
		assertEquals(turnosDeTrabajoEntity.getDescripcion(), turnosDeTrabajo.getDescripcion());
		assertEquals(turnosDeTrabajoEntity.getTurnoRotatorio(), turnosDeTrabajo.getTurnoRotatorio());
		assertEquals(turnosDeTrabajoEntity.getPuestoDeTrabajo().getIdpuestoDeTrabajo(), turnosDeTrabajo.getIdPuestoTrabajo());
		assertEquals(turnosDeTrabajoEntity.getTurnosDeTrabajo().getIdturnosDeTrabajo(), turnosDeTrabajo.getIdSiguienteTurno());
	}
	
	/**
	 * Test : Mapping from 'TurnosDeTrabajo' to 'TurnosDeTrabajoEntity'
	 */
	@Test
	public void testMapTurnosDeTrabajoToTurnosDeTrabajoEntity() {
		// Given
		TurnosDeTrabajo turnosDeTrabajo = new TurnosDeTrabajo();
		turnosDeTrabajo.setNombre(mockValues.nextString(45));
		turnosDeTrabajo.setDescripcion(mockValues.nextString(65));
		turnosDeTrabajo.setTurnoRotatorio(mockValues.nextBoolean());
		turnosDeTrabajo.setIdPuestoTrabajo(mockValues.nextInteger());
		turnosDeTrabajo.setIdSiguienteTurno(mockValues.nextInteger());

		TurnosDeTrabajoEntity turnosDeTrabajoEntity = new TurnosDeTrabajoEntity();
		
		// When
		turnosDeTrabajoServiceMapper.mapTurnosDeTrabajoToTurnosDeTrabajoEntity(turnosDeTrabajo, turnosDeTrabajoEntity);
		
		// Then
		assertEquals(turnosDeTrabajo.getNombre(), turnosDeTrabajoEntity.getNombre());
		assertEquals(turnosDeTrabajo.getDescripcion(), turnosDeTrabajoEntity.getDescripcion());
		assertEquals(turnosDeTrabajo.getTurnoRotatorio(), turnosDeTrabajoEntity.getTurnoRotatorio());
		assertEquals(turnosDeTrabajo.getIdPuestoTrabajo(), turnosDeTrabajoEntity.getPuestoDeTrabajo().getIdpuestoDeTrabajo());
		assertEquals(turnosDeTrabajo.getIdSiguienteTurno(), turnosDeTrabajoEntity.getTurnosDeTrabajo().getIdturnosDeTrabajo());
	}

}