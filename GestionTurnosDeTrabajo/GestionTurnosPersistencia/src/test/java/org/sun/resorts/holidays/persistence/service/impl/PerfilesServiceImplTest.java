/*
 * Created on 31 oct 2015 ( Time 10:51:34 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.Perfiles;
import org.sun.resorts.holidays.model.jpa.PerfilesEntity;
import java.util.List;
import org.sun.resorts.holidays.persistence.service.mapping.PerfilesServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.PerfilesJpaRepository;
import org.sun.resorts.holidays.test.PerfilesFactoryForTest;
import org.sun.resorts.holidays.test.PerfilesEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PerfilesService
 */
@RunWith(MockitoJUnitRunner.class)
public class PerfilesServiceImplTest {

	@InjectMocks
	private PerfilesServiceImpl perfilesService;
	@Mock
	private PerfilesJpaRepository perfilesJpaRepository;
	@Mock
	private PerfilesServiceMapper perfilesServiceMapper;
	
	private PerfilesFactoryForTest perfilesFactoryForTest = new PerfilesFactoryForTest();

	private PerfilesEntityFactoryForTest perfilesEntityFactoryForTest = new PerfilesEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idperfiles = mockValues.nextInteger();
		
		PerfilesEntity perfilesEntity = perfilesJpaRepository.findOne(idperfiles);
		
		Perfiles perfiles = perfilesFactoryForTest.newPerfiles();
		when(perfilesServiceMapper.mapPerfilesEntityToPerfiles(perfilesEntity)).thenReturn(perfiles);

		// When
		Perfiles perfilesFound = perfilesService.findById(idperfiles);

		// Then
		assertEquals(perfiles.getIdperfiles(),perfilesFound.getIdperfiles());
	}

	@Test
	public void findAll() {
		// Given
		List<PerfilesEntity> perfilesEntitys = new ArrayList<PerfilesEntity>();
		PerfilesEntity perfilesEntity1 = perfilesEntityFactoryForTest.newPerfilesEntity();
		perfilesEntitys.add(perfilesEntity1);
		PerfilesEntity perfilesEntity2 = perfilesEntityFactoryForTest.newPerfilesEntity();
		perfilesEntitys.add(perfilesEntity2);
		when(perfilesJpaRepository.findAll()).thenReturn(perfilesEntitys);
		
		Perfiles perfiles1 = perfilesFactoryForTest.newPerfiles();
		when(perfilesServiceMapper.mapPerfilesEntityToPerfiles(perfilesEntity1)).thenReturn(perfiles1);
		Perfiles perfiles2 = perfilesFactoryForTest.newPerfiles();
		when(perfilesServiceMapper.mapPerfilesEntityToPerfiles(perfilesEntity2)).thenReturn(perfiles2);

		// When
		List<Perfiles> perfilessFounds = perfilesService.findAll();

		// Then
		assertTrue(perfiles1 == perfilessFounds.get(0));
		assertTrue(perfiles2 == perfilessFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Perfiles perfiles = perfilesFactoryForTest.newPerfiles();

		PerfilesEntity perfilesEntity = perfilesEntityFactoryForTest.newPerfilesEntity();
		when(perfilesJpaRepository.findOne(perfiles.getIdperfiles())).thenReturn(null);
		
		perfilesEntity = new PerfilesEntity();
		perfilesServiceMapper.mapPerfilesToPerfilesEntity(perfiles, perfilesEntity);
		PerfilesEntity perfilesEntitySaved = perfilesJpaRepository.save(perfilesEntity);
		
		Perfiles perfilesSaved = perfilesFactoryForTest.newPerfiles();
		when(perfilesServiceMapper.mapPerfilesEntityToPerfiles(perfilesEntitySaved)).thenReturn(perfilesSaved);

		// When
		Perfiles perfilesResult = perfilesService.create(perfiles);

		// Then
		assertTrue(perfilesResult == perfilesSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Perfiles perfiles = perfilesFactoryForTest.newPerfiles();

		PerfilesEntity perfilesEntity = perfilesEntityFactoryForTest.newPerfilesEntity();
		when(perfilesJpaRepository.findOne(perfiles.getIdperfiles())).thenReturn(perfilesEntity);

		// When
		Exception exception = null;
		try {
			perfilesService.create(perfiles);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Perfiles perfiles = perfilesFactoryForTest.newPerfiles();

		PerfilesEntity perfilesEntity = perfilesEntityFactoryForTest.newPerfilesEntity();
		when(perfilesJpaRepository.findOne(perfiles.getIdperfiles())).thenReturn(perfilesEntity);
		
		PerfilesEntity perfilesEntitySaved = perfilesEntityFactoryForTest.newPerfilesEntity();
		when(perfilesJpaRepository.save(perfilesEntity)).thenReturn(perfilesEntitySaved);
		
		Perfiles perfilesSaved = perfilesFactoryForTest.newPerfiles();
		when(perfilesServiceMapper.mapPerfilesEntityToPerfiles(perfilesEntitySaved)).thenReturn(perfilesSaved);

		// When
		Perfiles perfilesResult = perfilesService.update(perfiles);

		// Then
		verify(perfilesServiceMapper).mapPerfilesToPerfilesEntity(perfiles, perfilesEntity);
		assertTrue(perfilesResult == perfilesSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idperfiles = mockValues.nextInteger();

		// When
		perfilesService.delete(idperfiles);

		// Then
		verify(perfilesJpaRepository).delete(idperfiles);
		
	}

}
