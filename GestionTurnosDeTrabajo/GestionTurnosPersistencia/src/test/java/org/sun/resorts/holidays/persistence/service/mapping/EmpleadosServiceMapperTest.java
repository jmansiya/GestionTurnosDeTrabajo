/*
 * Created on 31 oct 2015 ( Time 10:51:34 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.sun.resorts.holidays.model.Empleados;
import org.sun.resorts.holidays.model.jpa.EmpleadosEntity;
import org.sun.resorts.holidays.model.jpa.DireccionEntity;
import org.sun.resorts.holidays.model.jpa.TurnosDeTrabajoEntity;
import org.sun.resorts.holidays.model.jpa.PerfilesEntity;
import org.sun.resorts.holidays.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class EmpleadosServiceMapperTest {

	private EmpleadosServiceMapper empleadosServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		empleadosServiceMapper = new EmpleadosServiceMapper();
		empleadosServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'EmpleadosEntity' to 'Empleados'
	 * @param empleadosEntity
	 */
	@Test
	public void testMapEmpleadosEntityToEmpleados() {
		// Given
		EmpleadosEntity empleadosEntity = new EmpleadosEntity();
		empleadosEntity.setNombre(mockValues.nextString(45));
		empleadosEntity.setApellido1(mockValues.nextString(50));
		empleadosEntity.setApellido2(mockValues.nextString(50));
		empleadosEntity.setTelefonoMovil(mockValues.nextString(45));
		empleadosEntity.setTelefonoFijo(mockValues.nextString(45));
		empleadosEntity.setFechaNacimiento(mockValues.nextDate());
		empleadosEntity.setFechaIncorporacion(mockValues.nextDate());
		empleadosEntity.setDni(mockValues.nextString(9));
		empleadosEntity.setNumDiasVacaciones(mockValues.nextInteger());
		empleadosEntity.setEmail(mockValues.nextString(45));
		empleadosEntity.setNumDiasFestivosPendientes(mockValues.nextInteger());
		empleadosEntity.setDireccion(new DireccionEntity());
		empleadosEntity.getDireccion().setIddireccion(mockValues.nextInteger());
		empleadosEntity.setTurnosDeTrabajo(new TurnosDeTrabajoEntity());
		empleadosEntity.getTurnosDeTrabajo().setIdturnosDeTrabajo(mockValues.nextInteger());
		empleadosEntity.setPerfiles(new PerfilesEntity());
		empleadosEntity.getPerfiles().setIdperfiles(mockValues.nextInteger());
		
		// When
		Empleados empleados = empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntity);
		
		// Then
		assertEquals(empleadosEntity.getNombre(), empleados.getNombre());
		assertEquals(empleadosEntity.getApellido1(), empleados.getApellido1());
		assertEquals(empleadosEntity.getApellido2(), empleados.getApellido2());
		assertEquals(empleadosEntity.getTelefonoMovil(), empleados.getTelefonoMovil());
		assertEquals(empleadosEntity.getTelefonoFijo(), empleados.getTelefonoFijo());
		assertEquals(empleadosEntity.getFechaNacimiento(), empleados.getFechaNacimiento());
		assertEquals(empleadosEntity.getFechaIncorporacion(), empleados.getFechaIncorporacion());
		assertEquals(empleadosEntity.getDni(), empleados.getDni());
		assertEquals(empleadosEntity.getNumDiasVacaciones(), empleados.getNumDiasVacaciones());
		assertEquals(empleadosEntity.getEmail(), empleados.getEmail());
		assertEquals(empleadosEntity.getNumDiasFestivosPendientes(), empleados.getNumDiasFestivosPendientes());
		assertEquals(empleadosEntity.getDireccion().getIddireccion(), empleados.getIdDireccion());
		assertEquals(empleadosEntity.getTurnosDeTrabajo().getIdturnosDeTrabajo(), empleados.getIdTurnoTrabajo());
		assertEquals(empleadosEntity.getPerfiles().getIdperfiles(), empleados.getPerfilesIdperfiles());
	}
	
	/**
	 * Test : Mapping from 'Empleados' to 'EmpleadosEntity'
	 */
	@Test
	public void testMapEmpleadosToEmpleadosEntity() {
		// Given
		Empleados empleados = new Empleados();
		empleados.setNombre(mockValues.nextString(45));
		empleados.setApellido1(mockValues.nextString(50));
		empleados.setApellido2(mockValues.nextString(50));
		empleados.setTelefonoMovil(mockValues.nextString(45));
		empleados.setTelefonoFijo(mockValues.nextString(45));
		empleados.setFechaNacimiento(mockValues.nextDate());
		empleados.setFechaIncorporacion(mockValues.nextDate());
		empleados.setDni(mockValues.nextString(9));
		empleados.setNumDiasVacaciones(mockValues.nextInteger());
		empleados.setEmail(mockValues.nextString(45));
		empleados.setNumDiasFestivosPendientes(mockValues.nextInteger());
		empleados.setIdDireccion(mockValues.nextInteger());
		empleados.setIdTurnoTrabajo(mockValues.nextInteger());
		empleados.setPerfilesIdperfiles(mockValues.nextInteger());

		EmpleadosEntity empleadosEntity = new EmpleadosEntity();
		
		// When
		empleadosServiceMapper.mapEmpleadosToEmpleadosEntity(empleados, empleadosEntity);
		
		// Then
		assertEquals(empleados.getNombre(), empleadosEntity.getNombre());
		assertEquals(empleados.getApellido1(), empleadosEntity.getApellido1());
		assertEquals(empleados.getApellido2(), empleadosEntity.getApellido2());
		assertEquals(empleados.getTelefonoMovil(), empleadosEntity.getTelefonoMovil());
		assertEquals(empleados.getTelefonoFijo(), empleadosEntity.getTelefonoFijo());
		assertEquals(empleados.getFechaNacimiento(), empleadosEntity.getFechaNacimiento());
		assertEquals(empleados.getFechaIncorporacion(), empleadosEntity.getFechaIncorporacion());
		assertEquals(empleados.getDni(), empleadosEntity.getDni());
		assertEquals(empleados.getNumDiasVacaciones(), empleadosEntity.getNumDiasVacaciones());
		assertEquals(empleados.getEmail(), empleadosEntity.getEmail());
		assertEquals(empleados.getNumDiasFestivosPendientes(), empleadosEntity.getNumDiasFestivosPendientes());
		assertEquals(empleados.getIdDireccion(), empleadosEntity.getDireccion().getIddireccion());
		assertEquals(empleados.getIdTurnoTrabajo(), empleadosEntity.getTurnosDeTrabajo().getIdturnosDeTrabajo());
		assertEquals(empleados.getPerfilesIdperfiles(), empleadosEntity.getPerfiles().getIdperfiles());
	}

}