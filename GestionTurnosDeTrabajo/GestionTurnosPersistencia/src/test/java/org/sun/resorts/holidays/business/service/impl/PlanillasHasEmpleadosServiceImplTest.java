/*
 * Created on 28 oct 2015 ( Time 21:40:10 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.sun.resorts.holidays.model.PlanillasHasEmpleados;
import org.sun.resorts.holidays.model.jpa.PlanillasHasEmpleadosEntity;
import org.sun.resorts.holidays.model.jpa.PlanillasHasEmpleadosEntityKey;
import org.sun.resorts.holidays.business.service.mapping.PlanillasHasEmpleadosServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.PlanillasHasEmpleadosJpaRepository;
import org.sun.resorts.holidays.test.PlanillasHasEmpleadosFactoryForTest;
import org.sun.resorts.holidays.test.PlanillasHasEmpleadosEntityFactoryForTest;
import org.sun.resorts.holidays.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PlanillasHasEmpleadosService
 */
@RunWith(MockitoJUnitRunner.class)
public class PlanillasHasEmpleadosServiceImplTest {

	@InjectMocks
	private PlanillasHasEmpleadosServiceImpl planillasHasEmpleadosService;
	@Mock
	private PlanillasHasEmpleadosJpaRepository planillasHasEmpleadosJpaRepository;
	@Mock
	private PlanillasHasEmpleadosServiceMapper planillasHasEmpleadosServiceMapper;
	
	private PlanillasHasEmpleadosFactoryForTest planillasHasEmpleadosFactoryForTest = new PlanillasHasEmpleadosFactoryForTest();

	private PlanillasHasEmpleadosEntityFactoryForTest planillasHasEmpleadosEntityFactoryForTest = new PlanillasHasEmpleadosEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer planillasIdplanillas = mockValues.nextInteger();
		Integer empleadosIdempleados = mockValues.nextInteger();
		
		PlanillasHasEmpleadosEntityKey planillasHasEmpleadosEntityKey = new PlanillasHasEmpleadosEntityKey(planillasIdplanillas, empleadosIdempleados);
		planillasHasEmpleadosEntityKey.setPlanillasIdplanillas(planillasIdplanillas);
		planillasHasEmpleadosEntityKey.setEmpleadosIdempleados(empleadosIdempleados);
		
		PlanillasHasEmpleadosEntity planillasHasEmpleadosEntity = planillasHasEmpleadosJpaRepository.findOne(planillasHasEmpleadosEntityKey);
		
		PlanillasHasEmpleados planillasHasEmpleados = planillasHasEmpleadosFactoryForTest.newPlanillasHasEmpleados();
		when(planillasHasEmpleadosServiceMapper.mapPlanillasHasEmpleadosEntityToPlanillasHasEmpleados(planillasHasEmpleadosEntity)).thenReturn(planillasHasEmpleados);

		// When
		PlanillasHasEmpleados planillasHasEmpleadosFound = planillasHasEmpleadosService.findById(planillasIdplanillas, empleadosIdempleados);

		// Then
		assertEquals(planillasHasEmpleados.getPlanillasIdplanillas(),planillasHasEmpleadosFound.getPlanillasIdplanillas());
		assertEquals(planillasHasEmpleados.getEmpleadosIdempleados(),planillasHasEmpleadosFound.getEmpleadosIdempleados());
	}

	@Test
	public void findAll() {
		// Given
		List<PlanillasHasEmpleadosEntity> planillasHasEmpleadosEntitys = new ArrayList<PlanillasHasEmpleadosEntity>();
		PlanillasHasEmpleadosEntity planillasHasEmpleadosEntity1 = planillasHasEmpleadosEntityFactoryForTest.newPlanillasHasEmpleadosEntity();
		planillasHasEmpleadosEntitys.add(planillasHasEmpleadosEntity1);
		PlanillasHasEmpleadosEntity planillasHasEmpleadosEntity2 = planillasHasEmpleadosEntityFactoryForTest.newPlanillasHasEmpleadosEntity();
		planillasHasEmpleadosEntitys.add(planillasHasEmpleadosEntity2);
		when(planillasHasEmpleadosJpaRepository.findAll()).thenReturn(planillasHasEmpleadosEntitys);
		
		PlanillasHasEmpleados planillasHasEmpleados1 = planillasHasEmpleadosFactoryForTest.newPlanillasHasEmpleados();
		when(planillasHasEmpleadosServiceMapper.mapPlanillasHasEmpleadosEntityToPlanillasHasEmpleados(planillasHasEmpleadosEntity1)).thenReturn(planillasHasEmpleados1);
		PlanillasHasEmpleados planillasHasEmpleados2 = planillasHasEmpleadosFactoryForTest.newPlanillasHasEmpleados();
		when(planillasHasEmpleadosServiceMapper.mapPlanillasHasEmpleadosEntityToPlanillasHasEmpleados(planillasHasEmpleadosEntity2)).thenReturn(planillasHasEmpleados2);

		// When
		List<PlanillasHasEmpleados> planillasHasEmpleadossFounds = planillasHasEmpleadosService.findAll();

		// Then
		assertTrue(planillasHasEmpleados1 == planillasHasEmpleadossFounds.get(0));
		assertTrue(planillasHasEmpleados2 == planillasHasEmpleadossFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PlanillasHasEmpleados planillasHasEmpleados = planillasHasEmpleadosFactoryForTest.newPlanillasHasEmpleados();

		PlanillasHasEmpleadosEntityKey id = new PlanillasHasEmpleadosEntityKey(planillasHasEmpleados.getPlanillasIdplanillas(), planillasHasEmpleados.getEmpleadosIdempleados());
		PlanillasHasEmpleadosEntity planillasHasEmpleadosEntity = planillasHasEmpleadosEntityFactoryForTest.newPlanillasHasEmpleadosEntity();
		when(planillasHasEmpleadosJpaRepository.findOne(id)).thenReturn(null);
		
		planillasHasEmpleadosEntity = new PlanillasHasEmpleadosEntity();
		planillasHasEmpleadosServiceMapper.mapPlanillasHasEmpleadosToPlanillasHasEmpleadosEntity(planillasHasEmpleados, planillasHasEmpleadosEntity);
		PlanillasHasEmpleadosEntity planillasHasEmpleadosEntitySaved = planillasHasEmpleadosJpaRepository.save(planillasHasEmpleadosEntity);
		
		PlanillasHasEmpleados planillasHasEmpleadosSaved = planillasHasEmpleadosFactoryForTest.newPlanillasHasEmpleados();
		when(planillasHasEmpleadosServiceMapper.mapPlanillasHasEmpleadosEntityToPlanillasHasEmpleados(planillasHasEmpleadosEntitySaved)).thenReturn(planillasHasEmpleadosSaved);

		// When
		PlanillasHasEmpleados planillasHasEmpleadosResult = planillasHasEmpleadosService.create(planillasHasEmpleados);

		// Then
		assertTrue(planillasHasEmpleadosResult == planillasHasEmpleadosSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PlanillasHasEmpleados planillasHasEmpleados = planillasHasEmpleadosFactoryForTest.newPlanillasHasEmpleados();

		PlanillasHasEmpleadosEntityKey id = new PlanillasHasEmpleadosEntityKey(planillasHasEmpleados.getPlanillasIdplanillas(), planillasHasEmpleados.getEmpleadosIdempleados());
		PlanillasHasEmpleadosEntity planillasHasEmpleadosEntity = planillasHasEmpleadosEntityFactoryForTest.newPlanillasHasEmpleadosEntity();
		when(planillasHasEmpleadosJpaRepository.findOne(id)).thenReturn(planillasHasEmpleadosEntity);

		// When
		Exception exception = null;
		try {
			planillasHasEmpleadosService.create(planillasHasEmpleados);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PlanillasHasEmpleados planillasHasEmpleados = planillasHasEmpleadosFactoryForTest.newPlanillasHasEmpleados();

		PlanillasHasEmpleadosEntityKey id = new PlanillasHasEmpleadosEntityKey(planillasHasEmpleados.getPlanillasIdplanillas(), planillasHasEmpleados.getEmpleadosIdempleados());
		PlanillasHasEmpleadosEntity planillasHasEmpleadosEntity = planillasHasEmpleadosEntityFactoryForTest.newPlanillasHasEmpleadosEntity();
		when(planillasHasEmpleadosJpaRepository.findOne(id)).thenReturn(planillasHasEmpleadosEntity);
		
		PlanillasHasEmpleadosEntity planillasHasEmpleadosEntitySaved = planillasHasEmpleadosEntityFactoryForTest.newPlanillasHasEmpleadosEntity();
		when(planillasHasEmpleadosJpaRepository.save(planillasHasEmpleadosEntity)).thenReturn(planillasHasEmpleadosEntitySaved);
		
		PlanillasHasEmpleados planillasHasEmpleadosSaved = planillasHasEmpleadosFactoryForTest.newPlanillasHasEmpleados();
		when(planillasHasEmpleadosServiceMapper.mapPlanillasHasEmpleadosEntityToPlanillasHasEmpleados(planillasHasEmpleadosEntitySaved)).thenReturn(planillasHasEmpleadosSaved);

		// When
		PlanillasHasEmpleados planillasHasEmpleadosResult = planillasHasEmpleadosService.update(planillasHasEmpleados);

		// Then
		verify(planillasHasEmpleadosServiceMapper).mapPlanillasHasEmpleadosToPlanillasHasEmpleadosEntity(planillasHasEmpleados, planillasHasEmpleadosEntity);
		assertTrue(planillasHasEmpleadosResult == planillasHasEmpleadosSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer planillasIdplanillas = mockValues.nextInteger();
		Integer empleadosIdempleados = mockValues.nextInteger();
		PlanillasHasEmpleadosEntityKey planillasHasEmpleadosEntityKey = new PlanillasHasEmpleadosEntityKey(planillasIdplanillas, empleadosIdempleados);

		// When
		planillasHasEmpleadosService.delete(planillasIdplanillas, empleadosIdempleados);

		// Then
		verify(planillasHasEmpleadosJpaRepository).delete(planillasHasEmpleadosEntityKey);
		
	}

}
