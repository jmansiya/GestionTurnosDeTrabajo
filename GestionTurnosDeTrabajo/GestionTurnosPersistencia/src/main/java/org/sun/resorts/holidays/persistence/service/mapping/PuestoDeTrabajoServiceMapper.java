/*
 * Created on 31 oct 2015 ( Time 10:51:35 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.sun.resorts.holidays.model.PuestoDeTrabajo;
import org.sun.resorts.holidays.model.jpa.PuestoDeTrabajoEntity;
import org.sun.resorts.holidays.model.jpa.EmpleadosEntity;
import org.sun.resorts.holidays.model.jpa.CentrosDeTrabajoEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PuestoDeTrabajoServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PuestoDeTrabajoServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PuestoDeTrabajoEntity' to 'PuestoDeTrabajo'
	 * @param puestoDeTrabajoEntity
	 */
	public PuestoDeTrabajo mapPuestoDeTrabajoEntityToPuestoDeTrabajo(PuestoDeTrabajoEntity puestoDeTrabajoEntity) {
		if(puestoDeTrabajoEntity == null) {
			return null;
		}

		//--- Generic mapping 
		PuestoDeTrabajo puestoDeTrabajo = map(puestoDeTrabajoEntity, PuestoDeTrabajo.class);

		//--- Link mapping ( link to Empleados )
		if(puestoDeTrabajoEntity.getCoordinador() != null) {
			puestoDeTrabajo.setIdSupervisor(puestoDeTrabajoEntity.getCoordinador().getIdempleados());
		}
		//--- Link mapping ( link to CentrosDeTrabajo )
		if(puestoDeTrabajoEntity.getCentrosDeTrabajo() != null) {
			puestoDeTrabajo.setIdCentrosTrabajo(puestoDeTrabajoEntity.getCentrosDeTrabajo().getIdcentrosDeTrabajo());
		}
		return puestoDeTrabajo;
	}
	
	/**
	 * Mapping from 'PuestoDeTrabajo' to 'PuestoDeTrabajoEntity'
	 * @param puestoDeTrabajo
	 * @param puestoDeTrabajoEntity
	 */
	public void mapPuestoDeTrabajoToPuestoDeTrabajoEntity(PuestoDeTrabajo puestoDeTrabajo, PuestoDeTrabajoEntity puestoDeTrabajoEntity) {
		if(puestoDeTrabajo == null) {
			return;
		}

		//--- Generic mapping 
		map(puestoDeTrabajo, puestoDeTrabajoEntity);

		//--- Link mapping ( link : puestoDeTrabajo )
		if( hasLinkToEmpleados(puestoDeTrabajo) ) {
			EmpleadosEntity empleados1 = new EmpleadosEntity();
			empleados1.setIdempleados( puestoDeTrabajo.getIdSupervisor() );
			puestoDeTrabajoEntity.setCoordinador( empleados1 );
		} else {
			puestoDeTrabajoEntity.setCoordinador( null );
		}

		//--- Link mapping ( link : puestoDeTrabajo )
		if( hasLinkToCentrosDeTrabajo(puestoDeTrabajo) ) {
			CentrosDeTrabajoEntity centrosDeTrabajo2 = new CentrosDeTrabajoEntity();
			centrosDeTrabajo2.setIdcentrosDeTrabajo( puestoDeTrabajo.getIdCentrosTrabajo() );
			puestoDeTrabajoEntity.setCentrosDeTrabajo( centrosDeTrabajo2 );
		} else {
			puestoDeTrabajoEntity.setCentrosDeTrabajo( null );
		}

	}
	
	/**
	 * Verify that Empleados id is valid.
	 * @param Empleados Empleados
	 * @return boolean
	 */
	private boolean hasLinkToEmpleados(PuestoDeTrabajo puestoDeTrabajo) {
		if(puestoDeTrabajo.getIdSupervisor() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that CentrosDeTrabajo id is valid.
	 * @param CentrosDeTrabajo CentrosDeTrabajo
	 * @return boolean
	 */
	private boolean hasLinkToCentrosDeTrabajo(PuestoDeTrabajo puestoDeTrabajo) {
		if(puestoDeTrabajo.getIdCentrosTrabajo() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}