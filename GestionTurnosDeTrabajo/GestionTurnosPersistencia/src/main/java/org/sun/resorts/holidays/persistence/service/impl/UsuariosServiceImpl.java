/*
 * Created on 31 oct 2015 ( Time 10:51:35 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.sun.resorts.holidays.model.Usuarios;
import org.sun.resorts.holidays.model.jpa.UsuariosEntity;
import org.sun.resorts.holidays.persistence.service.UsuariosService;
import org.sun.resorts.holidays.persistence.service.mapping.UsuariosServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.UsuariosJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of UsuariosService
 */
@Component
@Transactional
public class UsuariosServiceImpl implements UsuariosService {

	@Resource
	private UsuariosJpaRepository usuariosJpaRepository;

	@Resource
	private UsuariosServiceMapper usuariosServiceMapper;
	
	@Override
	public Usuarios findById(Integer idusuarios) {
		UsuariosEntity usuariosEntity = usuariosJpaRepository.findOne(idusuarios);
		return usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntity);
	}

	@Override
	public List<Usuarios> findAll() {
		Iterable<UsuariosEntity> entities = usuariosJpaRepository.findAll();
		List<Usuarios> beans = new ArrayList<Usuarios>();
		for(UsuariosEntity usuariosEntity : entities) {
			beans.add(usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntity));
		}
		return beans;
	}

	@Override
	public Usuarios save(Usuarios usuarios) {
		return update(usuarios) ;
	}

	@Override
	public Usuarios create(Usuarios usuarios) {
		UsuariosEntity usuariosEntity = usuariosJpaRepository.findOne(usuarios.getIdusuarios());
		if( usuariosEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		usuariosEntity = new UsuariosEntity();
		usuariosServiceMapper.mapUsuariosToUsuariosEntity(usuarios, usuariosEntity);
		UsuariosEntity usuariosEntitySaved = usuariosJpaRepository.save(usuariosEntity);
		return usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntitySaved);
	}

	@Override
	public Usuarios update(Usuarios usuarios) {
		UsuariosEntity usuariosEntity = usuariosJpaRepository.findOne(usuarios.getIdusuarios());
		usuariosServiceMapper.mapUsuariosToUsuariosEntity(usuarios, usuariosEntity);
		UsuariosEntity usuariosEntitySaved = usuariosJpaRepository.save(usuariosEntity);
		return usuariosServiceMapper.mapUsuariosEntityToUsuarios(usuariosEntitySaved);
	}

	@Override
	public void delete(Integer idusuarios) {
		usuariosJpaRepository.delete(idusuarios);
	}

	public UsuariosJpaRepository getUsuariosJpaRepository() {
		return usuariosJpaRepository;
	}

	public void setUsuariosJpaRepository(UsuariosJpaRepository usuariosJpaRepository) {
		this.usuariosJpaRepository = usuariosJpaRepository;
	}

	public UsuariosServiceMapper getUsuariosServiceMapper() {
		return usuariosServiceMapper;
	}

	public void setUsuariosServiceMapper(UsuariosServiceMapper usuariosServiceMapper) {
		this.usuariosServiceMapper = usuariosServiceMapper;
	}

}
