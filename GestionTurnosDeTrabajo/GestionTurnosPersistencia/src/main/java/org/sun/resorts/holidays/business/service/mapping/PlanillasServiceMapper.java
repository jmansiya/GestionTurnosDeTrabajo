/*
 * Created on 28 oct 2015 ( Time 21:40:10 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.sun.resorts.holidays.model.Planillas;
import org.sun.resorts.holidays.model.jpa.PlanillasEntity;
import org.sun.resorts.holidays.model.jpa.DetallePlanillaEntity;
import org.sun.resorts.holidays.model.jpa.PuestoDeTrabajoEntity;
import org.sun.resorts.holidays.model.jpa.VolumenTrabajoEspecialEntity;
import org.sun.resorts.holidays.model.jpa.EstadosEntity;
import org.sun.resorts.holidays.model.jpa.TipoFechaEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PlanillasServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PlanillasServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PlanillasEntity' to 'Planillas'
	 * @param planillasEntity
	 */
	public Planillas mapPlanillasEntityToPlanillas(PlanillasEntity planillasEntity) {
		if(planillasEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Planillas planillas = map(planillasEntity, Planillas.class);

		//--- Link mapping ( link to DetallePlanilla )
		if(planillasEntity.getDetallePlanilla() != null) {
			planillas.setIdDetalle(planillasEntity.getDetallePlanilla().getIddetallePlanilla());
		}
		//--- Link mapping ( link to PuestoDeTrabajo )
		if(planillasEntity.getPuestoDeTrabajo() != null) {
			planillas.setIdPuestoTrabajo(planillasEntity.getPuestoDeTrabajo().getIdpuestoDeTrabajo());
		}
		//--- Link mapping ( link to VolumenTrabajoEspecial )
		if(planillasEntity.getVolumenTrabajoEspecial() != null) {
			planillas.setIdVolumenEspecial(planillasEntity.getVolumenTrabajoEspecial().getIdvolumen());
		}
		//--- Link mapping ( link to Estados )
		if(planillasEntity.getEstados() != null) {
			planillas.setIdEstado(planillasEntity.getEstados().getIdestados());
		}
		//--- Link mapping ( link to TipoFecha )
		if(planillasEntity.getTipoFecha() != null) {
			planillas.setIdTipoFecha(planillasEntity.getTipoFecha().getIdtipoFecha());
		}
		return planillas;
	}
	
	/**
	 * Mapping from 'Planillas' to 'PlanillasEntity'
	 * @param planillas
	 * @param planillasEntity
	 */
	public void mapPlanillasToPlanillasEntity(Planillas planillas, PlanillasEntity planillasEntity) {
		if(planillas == null) {
			return;
		}

		//--- Generic mapping 
		map(planillas, planillasEntity);

		//--- Link mapping ( link : planillas )
		if( hasLinkToDetallePlanilla(planillas) ) {
			DetallePlanillaEntity detallePlanilla1 = new DetallePlanillaEntity();
			detallePlanilla1.setIddetallePlanilla( planillas.getIdDetalle() );
			planillasEntity.setDetallePlanilla( detallePlanilla1 );
		} else {
			planillasEntity.setDetallePlanilla( null );
		}

		//--- Link mapping ( link : planillas )
		if( hasLinkToPuestoDeTrabajo(planillas) ) {
			PuestoDeTrabajoEntity puestoDeTrabajo2 = new PuestoDeTrabajoEntity();
			puestoDeTrabajo2.setIdpuestoDeTrabajo( planillas.getIdPuestoTrabajo() );
			planillasEntity.setPuestoDeTrabajo( puestoDeTrabajo2 );
		} else {
			planillasEntity.setPuestoDeTrabajo( null );
		}

		//--- Link mapping ( link : planillas )
		if( hasLinkToVolumenTrabajoEspecial(planillas) ) {
			VolumenTrabajoEspecialEntity volumenTrabajoEspecial3 = new VolumenTrabajoEspecialEntity();
			volumenTrabajoEspecial3.setIdvolumen( planillas.getIdVolumenEspecial() );
			planillasEntity.setVolumenTrabajoEspecial( volumenTrabajoEspecial3 );
		} else {
			planillasEntity.setVolumenTrabajoEspecial( null );
		}

		//--- Link mapping ( link : planillas )
		if( hasLinkToEstados(planillas) ) {
			EstadosEntity estados4 = new EstadosEntity();
			estados4.setIdestados( planillas.getIdEstado() );
			planillasEntity.setEstados( estados4 );
		} else {
			planillasEntity.setEstados( null );
		}

		//--- Link mapping ( link : planillas )
		if( hasLinkToTipoFecha(planillas) ) {
			TipoFechaEntity tipoFecha5 = new TipoFechaEntity();
			tipoFecha5.setIdtipoFecha( planillas.getIdTipoFecha() );
			planillasEntity.setTipoFecha( tipoFecha5 );
		} else {
			planillasEntity.setTipoFecha( null );
		}

	}
	
	/**
	 * Verify that DetallePlanilla id is valid.
	 * @param DetallePlanilla DetallePlanilla
	 * @return boolean
	 */
	private boolean hasLinkToDetallePlanilla(Planillas planillas) {
		if(planillas.getIdDetalle() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that PuestoDeTrabajo id is valid.
	 * @param PuestoDeTrabajo PuestoDeTrabajo
	 * @return boolean
	 */
	private boolean hasLinkToPuestoDeTrabajo(Planillas planillas) {
		if(planillas.getIdPuestoTrabajo() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that VolumenTrabajoEspecial id is valid.
	 * @param VolumenTrabajoEspecial VolumenTrabajoEspecial
	 * @return boolean
	 */
	private boolean hasLinkToVolumenTrabajoEspecial(Planillas planillas) {
		if(planillas.getIdVolumenEspecial() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Estados id is valid.
	 * @param Estados Estados
	 * @return boolean
	 */
	private boolean hasLinkToEstados(Planillas planillas) {
		if(planillas.getIdEstado() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that TipoFecha id is valid.
	 * @param TipoFecha TipoFecha
	 * @return boolean
	 */
	private boolean hasLinkToTipoFecha(Planillas planillas) {
		if(planillas.getIdTipoFecha() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}