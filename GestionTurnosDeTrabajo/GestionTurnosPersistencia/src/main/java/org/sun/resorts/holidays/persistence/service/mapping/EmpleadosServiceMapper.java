/*
 * Created on 31 oct 2015 ( Time 10:51:34 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.sun.resorts.holidays.model.Empleados;
import org.sun.resorts.holidays.model.jpa.EmpleadosEntity;
import org.sun.resorts.holidays.model.jpa.DireccionEntity;
import org.sun.resorts.holidays.model.jpa.TurnosDeTrabajoEntity;
import org.sun.resorts.holidays.model.jpa.PerfilesEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class EmpleadosServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public EmpleadosServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'EmpleadosEntity' to 'Empleados'
	 * @param empleadosEntity
	 */
	public Empleados mapEmpleadosEntityToEmpleados(EmpleadosEntity empleadosEntity) {
		if(empleadosEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Empleados empleados = map(empleadosEntity, Empleados.class);

		//--- Link mapping ( link to Direccion )
		if(empleadosEntity.getDireccion() != null) {
			empleados.setIdDireccion(empleadosEntity.getDireccion().getIddireccion());
		}
		//--- Link mapping ( link to TurnosDeTrabajo )
		if(empleadosEntity.getTurnosDeTrabajo() != null) {
			empleados.setIdTurnoTrabajo(empleadosEntity.getTurnosDeTrabajo().getIdturnosDeTrabajo());
		}
		//--- Link mapping ( link to Perfiles )
		if(empleadosEntity.getPerfiles() != null) {
			empleados.setPerfilesIdperfiles(empleadosEntity.getPerfiles().getIdperfiles());
		}
		return empleados;
	}
	
	/**
	 * Mapping from 'Empleados' to 'EmpleadosEntity'
	 * @param empleados
	 * @param empleadosEntity
	 */
	public void mapEmpleadosToEmpleadosEntity(Empleados empleados, EmpleadosEntity empleadosEntity) {
		if(empleados == null) {
			return;
		}

		//--- Generic mapping 
		map(empleados, empleadosEntity);

		//--- Link mapping ( link : empleados )
		if( hasLinkToDireccion(empleados) ) {
			DireccionEntity direccion1 = new DireccionEntity();
			direccion1.setIddireccion( empleados.getIdDireccion() );
			empleadosEntity.setDireccion( direccion1 );
		} else {
			empleadosEntity.setDireccion( null );
		}

		//--- Link mapping ( link : empleados )
		if( hasLinkToTurnosDeTrabajo(empleados) ) {
			TurnosDeTrabajoEntity turnosDeTrabajo2 = new TurnosDeTrabajoEntity();
			turnosDeTrabajo2.setIdturnosDeTrabajo( empleados.getIdTurnoTrabajo() );
			empleadosEntity.setTurnosDeTrabajo( turnosDeTrabajo2 );
		} else {
			empleadosEntity.setTurnosDeTrabajo( null );
		}

		//--- Link mapping ( link : empleados )
		if( hasLinkToPerfiles(empleados) ) {
			PerfilesEntity perfiles3 = new PerfilesEntity();
			perfiles3.setIdperfiles( empleados.getPerfilesIdperfiles() );
			empleadosEntity.setPerfiles( perfiles3 );
		} else {
			empleadosEntity.setPerfiles( null );
		}

	}
	
	/**
	 * Verify that Direccion id is valid.
	 * @param Direccion Direccion
	 * @return boolean
	 */
	private boolean hasLinkToDireccion(Empleados empleados) {
		if(empleados.getIdDireccion() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that TurnosDeTrabajo id is valid.
	 * @param TurnosDeTrabajo TurnosDeTrabajo
	 * @return boolean
	 */
	private boolean hasLinkToTurnosDeTrabajo(Empleados empleados) {
		if(empleados.getIdTurnoTrabajo() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Perfiles id is valid.
	 * @param Perfiles Perfiles
	 * @return boolean
	 */
	private boolean hasLinkToPerfiles(Empleados empleados) {
		if(empleados.getPerfilesIdperfiles() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}