/*
 * Created on 31 oct 2015 ( Time 10:51:33 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.sun.resorts.holidays.model.CentrosDeTrabajo;
import org.sun.resorts.holidays.model.jpa.CentrosDeTrabajoEntity;
import java.util.List;
import org.sun.resorts.holidays.persistence.service.CentrosDeTrabajoService;
import org.sun.resorts.holidays.persistence.service.mapping.CentrosDeTrabajoServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.CentrosDeTrabajoJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CentrosDeTrabajoService
 */
@Component
@Transactional
public class CentrosDeTrabajoServiceImpl implements CentrosDeTrabajoService {

	@Resource
	private CentrosDeTrabajoJpaRepository centrosDeTrabajoJpaRepository;

	@Resource
	private CentrosDeTrabajoServiceMapper centrosDeTrabajoServiceMapper;
	
	@Override
	public CentrosDeTrabajo findById(Integer idcentrosDeTrabajo) {
		CentrosDeTrabajoEntity centrosDeTrabajoEntity = centrosDeTrabajoJpaRepository.findOne(idcentrosDeTrabajo);
		return centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntity);
	}

	@Override
	public List<CentrosDeTrabajo> findAll() {
		Iterable<CentrosDeTrabajoEntity> entities = centrosDeTrabajoJpaRepository.findAll();
		List<CentrosDeTrabajo> beans = new ArrayList<CentrosDeTrabajo>();
		for(CentrosDeTrabajoEntity centrosDeTrabajoEntity : entities) {
			beans.add(centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntity));
		}
		return beans;
	}

	@Override
	public CentrosDeTrabajo save(CentrosDeTrabajo centrosDeTrabajo) {
		return update(centrosDeTrabajo) ;
	}

	@Override
	public CentrosDeTrabajo create(CentrosDeTrabajo centrosDeTrabajo) {
		CentrosDeTrabajoEntity centrosDeTrabajoEntity = centrosDeTrabajoJpaRepository.findOne(centrosDeTrabajo.getIdcentrosDeTrabajo());
		if( centrosDeTrabajoEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		centrosDeTrabajoEntity = new CentrosDeTrabajoEntity();
		centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoToCentrosDeTrabajoEntity(centrosDeTrabajo, centrosDeTrabajoEntity);
		CentrosDeTrabajoEntity centrosDeTrabajoEntitySaved = centrosDeTrabajoJpaRepository.save(centrosDeTrabajoEntity);
		return centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntitySaved);
	}

	@Override
	public CentrosDeTrabajo update(CentrosDeTrabajo centrosDeTrabajo) {
		CentrosDeTrabajoEntity centrosDeTrabajoEntity = centrosDeTrabajoJpaRepository.findOne(centrosDeTrabajo.getIdcentrosDeTrabajo());
		centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoToCentrosDeTrabajoEntity(centrosDeTrabajo, centrosDeTrabajoEntity);
		CentrosDeTrabajoEntity centrosDeTrabajoEntitySaved = centrosDeTrabajoJpaRepository.save(centrosDeTrabajoEntity);
		return centrosDeTrabajoServiceMapper.mapCentrosDeTrabajoEntityToCentrosDeTrabajo(centrosDeTrabajoEntitySaved);
	}

	@Override
	public void delete(Integer idcentrosDeTrabajo) {
		centrosDeTrabajoJpaRepository.delete(idcentrosDeTrabajo);
	}

	public CentrosDeTrabajoJpaRepository getCentrosDeTrabajoJpaRepository() {
		return centrosDeTrabajoJpaRepository;
	}

	public void setCentrosDeTrabajoJpaRepository(CentrosDeTrabajoJpaRepository centrosDeTrabajoJpaRepository) {
		this.centrosDeTrabajoJpaRepository = centrosDeTrabajoJpaRepository;
	}

	public CentrosDeTrabajoServiceMapper getCentrosDeTrabajoServiceMapper() {
		return centrosDeTrabajoServiceMapper;
	}

	public void setCentrosDeTrabajoServiceMapper(CentrosDeTrabajoServiceMapper centrosDeTrabajoServiceMapper) {
		this.centrosDeTrabajoServiceMapper = centrosDeTrabajoServiceMapper;
	}

}
