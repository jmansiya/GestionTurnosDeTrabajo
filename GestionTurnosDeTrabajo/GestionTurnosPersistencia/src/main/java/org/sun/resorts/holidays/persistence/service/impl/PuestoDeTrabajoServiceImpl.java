/*
 * Created on 31 oct 2015 ( Time 10:51:35 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.persistence.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.sun.resorts.holidays.model.PuestoDeTrabajo;
import org.sun.resorts.holidays.model.jpa.PuestoDeTrabajoEntity;
import java.util.List;
import org.sun.resorts.holidays.persistence.service.PuestoDeTrabajoService;
import org.sun.resorts.holidays.persistence.service.mapping.PuestoDeTrabajoServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.PuestoDeTrabajoJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of PuestoDeTrabajoService
 */
@Component
@Transactional
public class PuestoDeTrabajoServiceImpl implements PuestoDeTrabajoService {

	@Resource
	private PuestoDeTrabajoJpaRepository puestoDeTrabajoJpaRepository;

	@Resource
	private PuestoDeTrabajoServiceMapper puestoDeTrabajoServiceMapper;
	
	@Override
	public PuestoDeTrabajo findById(Integer idpuestoDeTrabajo) {
		PuestoDeTrabajoEntity puestoDeTrabajoEntity = puestoDeTrabajoJpaRepository.findOne(idpuestoDeTrabajo);
		return puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntity);
	}

	@Override
	public List<PuestoDeTrabajo> findAll() {
		Iterable<PuestoDeTrabajoEntity> entities = puestoDeTrabajoJpaRepository.findAll();
		List<PuestoDeTrabajo> beans = new ArrayList<PuestoDeTrabajo>();
		for(PuestoDeTrabajoEntity puestoDeTrabajoEntity : entities) {
			beans.add(puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntity));
		}
		return beans;
	}

	@Override
	public PuestoDeTrabajo save(PuestoDeTrabajo puestoDeTrabajo) {
		return update(puestoDeTrabajo) ;
	}

	@Override
	public PuestoDeTrabajo create(PuestoDeTrabajo puestoDeTrabajo) {
		PuestoDeTrabajoEntity puestoDeTrabajoEntity = puestoDeTrabajoJpaRepository.findOne(puestoDeTrabajo.getIdpuestoDeTrabajo());
		if( puestoDeTrabajoEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		puestoDeTrabajoEntity = new PuestoDeTrabajoEntity();
		puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoToPuestoDeTrabajoEntity(puestoDeTrabajo, puestoDeTrabajoEntity);
		PuestoDeTrabajoEntity puestoDeTrabajoEntitySaved = puestoDeTrabajoJpaRepository.save(puestoDeTrabajoEntity);
		return puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntitySaved);
	}

	@Override
	public PuestoDeTrabajo update(PuestoDeTrabajo puestoDeTrabajo) {
		PuestoDeTrabajoEntity puestoDeTrabajoEntity = puestoDeTrabajoJpaRepository.findOne(puestoDeTrabajo.getIdpuestoDeTrabajo());
		puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoToPuestoDeTrabajoEntity(puestoDeTrabajo, puestoDeTrabajoEntity);
		PuestoDeTrabajoEntity puestoDeTrabajoEntitySaved = puestoDeTrabajoJpaRepository.save(puestoDeTrabajoEntity);
		return puestoDeTrabajoServiceMapper.mapPuestoDeTrabajoEntityToPuestoDeTrabajo(puestoDeTrabajoEntitySaved);
	}

	@Override
	public void delete(Integer idpuestoDeTrabajo) {
		puestoDeTrabajoJpaRepository.delete(idpuestoDeTrabajo);
	}

	public PuestoDeTrabajoJpaRepository getPuestoDeTrabajoJpaRepository() {
		return puestoDeTrabajoJpaRepository;
	}

	public void setPuestoDeTrabajoJpaRepository(PuestoDeTrabajoJpaRepository puestoDeTrabajoJpaRepository) {
		this.puestoDeTrabajoJpaRepository = puestoDeTrabajoJpaRepository;
	}

	public PuestoDeTrabajoServiceMapper getPuestoDeTrabajoServiceMapper() {
		return puestoDeTrabajoServiceMapper;
	}

	public void setPuestoDeTrabajoServiceMapper(PuestoDeTrabajoServiceMapper puestoDeTrabajoServiceMapper) {
		this.puestoDeTrabajoServiceMapper = puestoDeTrabajoServiceMapper;
	}

}
