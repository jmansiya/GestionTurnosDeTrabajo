/*
 * Created on 28 oct 2015 ( Time 21:40:11 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.sun.resorts.holidays.model.TurnosTrabajoEspeciales;
import org.sun.resorts.holidays.model.jpa.TurnosTrabajoEspecialesEntity;
import org.sun.resorts.holidays.model.jpa.TurnosTrabajoEspecialesEntityKey;
import java.util.Date;
import org.sun.resorts.holidays.business.service.TurnosTrabajoEspecialesService;
import org.sun.resorts.holidays.business.service.mapping.TurnosTrabajoEspecialesServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.TurnosTrabajoEspecialesJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of TurnosTrabajoEspecialesService
 */
@Component
@Transactional
public class TurnosTrabajoEspecialesServiceImpl implements TurnosTrabajoEspecialesService {

	@Resource
	private TurnosTrabajoEspecialesJpaRepository turnosTrabajoEspecialesJpaRepository;

	@Resource
	private TurnosTrabajoEspecialesServiceMapper turnosTrabajoEspecialesServiceMapper;
	
	
	public TurnosTrabajoEspeciales findById(Integer empleadosIdempleados, Integer turnosDeTrabajoIdturnosDeTrabajo) {
		TurnosTrabajoEspecialesEntityKey id = new TurnosTrabajoEspecialesEntityKey(empleadosIdempleados, turnosDeTrabajoIdturnosDeTrabajo);
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = turnosTrabajoEspecialesJpaRepository.findOne(id);
		return turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntity);
	}

	
	public List<TurnosTrabajoEspeciales> findAll() {
		Iterable<TurnosTrabajoEspecialesEntity> entities = turnosTrabajoEspecialesJpaRepository.findAll();
		List<TurnosTrabajoEspeciales> beans = new ArrayList<TurnosTrabajoEspeciales>();
		for(TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity : entities) {
			beans.add(turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntity));
		}
		return beans;
	}

	
	public TurnosTrabajoEspeciales save(TurnosTrabajoEspeciales turnosTrabajoEspeciales) {
		return update(turnosTrabajoEspeciales) ;
	}

	
	public TurnosTrabajoEspeciales create(TurnosTrabajoEspeciales turnosTrabajoEspeciales) {
		TurnosTrabajoEspecialesEntityKey id = new TurnosTrabajoEspecialesEntityKey(turnosTrabajoEspeciales.getEmpleadosIdempleados(), turnosTrabajoEspeciales.getTurnosDeTrabajoIdturnosDeTrabajo());
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = turnosTrabajoEspecialesJpaRepository.findOne(id);
		if( turnosTrabajoEspecialesEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		turnosTrabajoEspecialesEntity = new TurnosTrabajoEspecialesEntity();
		turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesToTurnosTrabajoEspecialesEntity(turnosTrabajoEspeciales, turnosTrabajoEspecialesEntity);
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntitySaved = turnosTrabajoEspecialesJpaRepository.save(turnosTrabajoEspecialesEntity);
		return turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntitySaved);
	}

	
	public TurnosTrabajoEspeciales update(TurnosTrabajoEspeciales turnosTrabajoEspeciales) {
		TurnosTrabajoEspecialesEntityKey id = new TurnosTrabajoEspecialesEntityKey(turnosTrabajoEspeciales.getEmpleadosIdempleados(), turnosTrabajoEspeciales.getTurnosDeTrabajoIdturnosDeTrabajo());
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntity = turnosTrabajoEspecialesJpaRepository.findOne(id);
		turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesToTurnosTrabajoEspecialesEntity(turnosTrabajoEspeciales, turnosTrabajoEspecialesEntity);
		TurnosTrabajoEspecialesEntity turnosTrabajoEspecialesEntitySaved = turnosTrabajoEspecialesJpaRepository.save(turnosTrabajoEspecialesEntity);
		return turnosTrabajoEspecialesServiceMapper.mapTurnosTrabajoEspecialesEntityToTurnosTrabajoEspeciales(turnosTrabajoEspecialesEntitySaved);
	}

	
	public void delete(Integer empleadosIdempleados, Integer turnosDeTrabajoIdturnosDeTrabajo) {
		TurnosTrabajoEspecialesEntityKey id = new TurnosTrabajoEspecialesEntityKey(empleadosIdempleados, turnosDeTrabajoIdturnosDeTrabajo);
		turnosTrabajoEspecialesJpaRepository.delete(id);
	}

	public TurnosTrabajoEspecialesJpaRepository getTurnosTrabajoEspecialesJpaRepository() {
		return turnosTrabajoEspecialesJpaRepository;
	}

	public void setTurnosTrabajoEspecialesJpaRepository(TurnosTrabajoEspecialesJpaRepository turnosTrabajoEspecialesJpaRepository) {
		this.turnosTrabajoEspecialesJpaRepository = turnosTrabajoEspecialesJpaRepository;
	}

	public TurnosTrabajoEspecialesServiceMapper getTurnosTrabajoEspecialesServiceMapper() {
		return turnosTrabajoEspecialesServiceMapper;
	}

	public void setTurnosTrabajoEspecialesServiceMapper(TurnosTrabajoEspecialesServiceMapper turnosTrabajoEspecialesServiceMapper) {
		this.turnosTrabajoEspecialesServiceMapper = turnosTrabajoEspecialesServiceMapper;
	}

}
