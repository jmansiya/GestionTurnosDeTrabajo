/*
 * Created on 28 oct 2015 ( Time 21:40:11 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.sun.resorts.holidays.model.TurnosDeTrabajo;
import org.sun.resorts.holidays.model.jpa.TurnosDeTrabajoEntity;
import java.util.List;
import org.sun.resorts.holidays.business.service.TurnosDeTrabajoService;
import org.sun.resorts.holidays.business.service.mapping.TurnosDeTrabajoServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.TurnosDeTrabajoJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of TurnosDeTrabajoService
 */
@Component
@Transactional
public class TurnosDeTrabajoServiceImpl implements TurnosDeTrabajoService {

	@Resource
	private TurnosDeTrabajoJpaRepository turnosDeTrabajoJpaRepository;

	@Resource
	private TurnosDeTrabajoServiceMapper turnosDeTrabajoServiceMapper;
	
	
	public TurnosDeTrabajo findById(Integer idturnosDeTrabajo) {
		TurnosDeTrabajoEntity turnosDeTrabajoEntity = turnosDeTrabajoJpaRepository.findOne(idturnosDeTrabajo);
		return turnosDeTrabajoServiceMapper.mapTurnosDeTrabajoEntityToTurnosDeTrabajo(turnosDeTrabajoEntity);
	}

	
	public List<TurnosDeTrabajo> findAll() {
		Iterable<TurnosDeTrabajoEntity> entities = turnosDeTrabajoJpaRepository.findAll();
		List<TurnosDeTrabajo> beans = new ArrayList<TurnosDeTrabajo>();
		for(TurnosDeTrabajoEntity turnosDeTrabajoEntity : entities) {
			beans.add(turnosDeTrabajoServiceMapper.mapTurnosDeTrabajoEntityToTurnosDeTrabajo(turnosDeTrabajoEntity));
		}
		return beans;
	}

	
	public TurnosDeTrabajo save(TurnosDeTrabajo turnosDeTrabajo) {
		return update(turnosDeTrabajo) ;
	}

	
	public TurnosDeTrabajo create(TurnosDeTrabajo turnosDeTrabajo) {
		TurnosDeTrabajoEntity turnosDeTrabajoEntity = turnosDeTrabajoJpaRepository.findOne(turnosDeTrabajo.getIdturnosDeTrabajo());
		if( turnosDeTrabajoEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		turnosDeTrabajoEntity = new TurnosDeTrabajoEntity();
		turnosDeTrabajoServiceMapper.mapTurnosDeTrabajoToTurnosDeTrabajoEntity(turnosDeTrabajo, turnosDeTrabajoEntity);
		TurnosDeTrabajoEntity turnosDeTrabajoEntitySaved = turnosDeTrabajoJpaRepository.save(turnosDeTrabajoEntity);
		return turnosDeTrabajoServiceMapper.mapTurnosDeTrabajoEntityToTurnosDeTrabajo(turnosDeTrabajoEntitySaved);
	}

	
	public TurnosDeTrabajo update(TurnosDeTrabajo turnosDeTrabajo) {
		TurnosDeTrabajoEntity turnosDeTrabajoEntity = turnosDeTrabajoJpaRepository.findOne(turnosDeTrabajo.getIdturnosDeTrabajo());
		turnosDeTrabajoServiceMapper.mapTurnosDeTrabajoToTurnosDeTrabajoEntity(turnosDeTrabajo, turnosDeTrabajoEntity);
		TurnosDeTrabajoEntity turnosDeTrabajoEntitySaved = turnosDeTrabajoJpaRepository.save(turnosDeTrabajoEntity);
		return turnosDeTrabajoServiceMapper.mapTurnosDeTrabajoEntityToTurnosDeTrabajo(turnosDeTrabajoEntitySaved);
	}

	
	public void delete(Integer idturnosDeTrabajo) {
		turnosDeTrabajoJpaRepository.delete(idturnosDeTrabajo);
	}

	public TurnosDeTrabajoJpaRepository getTurnosDeTrabajoJpaRepository() {
		return turnosDeTrabajoJpaRepository;
	}

	public void setTurnosDeTrabajoJpaRepository(TurnosDeTrabajoJpaRepository turnosDeTrabajoJpaRepository) {
		this.turnosDeTrabajoJpaRepository = turnosDeTrabajoJpaRepository;
	}

	public TurnosDeTrabajoServiceMapper getTurnosDeTrabajoServiceMapper() {
		return turnosDeTrabajoServiceMapper;
	}

	public void setTurnosDeTrabajoServiceMapper(TurnosDeTrabajoServiceMapper turnosDeTrabajoServiceMapper) {
		this.turnosDeTrabajoServiceMapper = turnosDeTrabajoServiceMapper;
	}

}
