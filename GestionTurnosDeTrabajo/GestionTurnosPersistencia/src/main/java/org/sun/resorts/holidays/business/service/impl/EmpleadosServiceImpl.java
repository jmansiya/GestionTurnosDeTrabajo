/*
 * Created on 28 oct 2015 ( Time 21:40:09 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package org.sun.resorts.holidays.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.sun.resorts.holidays.model.Empleados;
import org.sun.resorts.holidays.model.jpa.EmpleadosEntity;
import java.util.Date;
import java.util.List;
import org.sun.resorts.holidays.business.service.EmpleadosService;
import org.sun.resorts.holidays.business.service.mapping.EmpleadosServiceMapper;
import org.sun.resorts.holidays.data.repository.jpa.EmpleadosJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of EmpleadosService
 */
@Component
@Transactional
public class EmpleadosServiceImpl implements EmpleadosService {

	@Resource
	private EmpleadosJpaRepository empleadosJpaRepository;

	@Resource
	private EmpleadosServiceMapper empleadosServiceMapper;
	

	public Empleados findById(Integer idempleados) {
		EmpleadosEntity empleadosEntity = empleadosJpaRepository.findOne(idempleados);
		return empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntity);
	}

	
	public List<Empleados> findAll() {
		Iterable<EmpleadosEntity> entities = empleadosJpaRepository.findAll();
		List<Empleados> beans = new ArrayList<Empleados>();
		for(EmpleadosEntity empleadosEntity : entities) {
			beans.add(empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntity));
		}
		return beans;
	}

	
	public Empleados save(Empleados empleados) {
		return update(empleados) ;
	}

	
	public Empleados create(Empleados empleados) {
		EmpleadosEntity empleadosEntity = empleadosJpaRepository.findOne(empleados.getIdempleados());
		if( empleadosEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		empleadosEntity = new EmpleadosEntity();
		empleadosServiceMapper.mapEmpleadosToEmpleadosEntity(empleados, empleadosEntity);
		EmpleadosEntity empleadosEntitySaved = empleadosJpaRepository.save(empleadosEntity);
		return empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntitySaved);
	}

	
	public Empleados update(Empleados empleados) {
		EmpleadosEntity empleadosEntity = empleadosJpaRepository.findOne(empleados.getIdempleados());
		empleadosServiceMapper.mapEmpleadosToEmpleadosEntity(empleados, empleadosEntity);
		EmpleadosEntity empleadosEntitySaved = empleadosJpaRepository.save(empleadosEntity);
		return empleadosServiceMapper.mapEmpleadosEntityToEmpleados(empleadosEntitySaved);
	}

	
	public void delete(Integer idempleados) {
		empleadosJpaRepository.delete(idempleados);
	}

	public EmpleadosJpaRepository getEmpleadosJpaRepository() {
		return empleadosJpaRepository;
	}

	public void setEmpleadosJpaRepository(EmpleadosJpaRepository empleadosJpaRepository) {
		this.empleadosJpaRepository = empleadosJpaRepository;
	}

	public EmpleadosServiceMapper getEmpleadosServiceMapper() {
		return empleadosServiceMapper;
	}

	public void setEmpleadosServiceMapper(EmpleadosServiceMapper empleadosServiceMapper) {
		this.empleadosServiceMapper = empleadosServiceMapper;
	}

}
