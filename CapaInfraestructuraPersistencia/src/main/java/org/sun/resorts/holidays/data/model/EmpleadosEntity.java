/*
 * Created on 17 oct 2015 ( Time 10:46:15 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.sun.resorts.holidays.data.model;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "empleados"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="empleados")
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="EmpleadosEntity.countAll", query="SELECT COUNT(x) FROM EmpleadosEntity x" )
} )
public class EmpleadosEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="idEMPLEADOS", nullable=false)
    private Integer    idempleados  ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="NOMBRE", nullable=false, length=45)
    private String     nombre       ;

    @Column(name="APELLIDO1", length=50)
    private String     apellido1    ;

    @Column(name="APELLIDO2", length=50)
    private String     apellido2    ;

    @Column(name="TELEFONO_MOVIL", nullable=false, length=45)
    private String     telefonoMovil ;

    @Column(name="TELEFONO_FIJO", length=45)
    private String     telefonoFijo ;

    @Temporal(TemporalType.DATE)
    @Column(name="FECHA_NACIMIENTO", nullable=false)
    private Date       fechaNacimiento ;

    @Temporal(TemporalType.DATE)
    @Column(name="FECHA_INCORPORACION", nullable=false)
    private Date       fechaIncorporacion ;

    @Column(name="DNI", nullable=false, length=9)
    private String     dni          ;

    @Column(name="NUM_DIAS_VACACIONES", nullable=false)
    private Integer    numDiasVacaciones ;

    @Column(name="EMAIL", nullable=false, length=45)
    private String     email        ;

	// "idDireccion" (column "ID_DIRECCION") is not defined by itself because used as FK in a link 
	// "usuariosIdusuarios" (column "USUARIOS_idUSUARIOS") is not defined by itself because used as FK in a link 
	// "perfilesIdperfiles" (column "PERFILES_idPERFILES") is not defined by itself because used as FK in a link 
	// "idTurnoTrabajo" (column "ID_TURNO_TRABAJO") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToMany(targetEntity=PlanillasEntity.class)
    @JoinTable(name="planillas_has_empleados", 
      joinColumns=@JoinColumn(name="EMPLEADOS_idEMPLEADOS", referencedColumnName="idEMPLEADOS"),
      inverseJoinColumns=@JoinColumn(name="PLANILLAS_idPLANILLAS", referencedColumnName="idPLANILLAS")
     ) 

    private List<PlanillasEntity> listOfPlanillas;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name="USUARIOS_idUSUARIOS", referencedColumnName="idUSUARIOS")
    private UsuariosEntity usuarios    ;

    @OneToMany(mappedBy="empleados", targetEntity=TurnosTrabajoEspecialesEntity.class)
    private List<TurnosTrabajoEspecialesEntity> listOfTurnosTrabajoEspeciales;

    @OneToMany(mappedBy="empleados", targetEntity=DiasFestivosPendientesEntity.class)
    private List<DiasFestivosPendientesEntity> listOfDiasFestivosPendientes;

    @OneToOne
    @JoinColumn(name="ID_DIRECCION", referencedColumnName="idDIRECCION")
    private DireccionEntity direccion   ;

    @ManyToOne
    @JoinColumn(name="PERFILES_idPERFILES", referencedColumnName="idPERFILES")
    private PerfilesEntity perfiles    ;

    @ManyToOne
    //@JoinColumn(name="ID_TURNO_TRABAJO", referencedColumnName="idTURNOS_DE_TRABAJO")
    @JoinColumns({    
    	  @JoinColumn(name = "ID_TURNO_TRABAJO", referencedColumnName = "idTURNOS_DE_TRABAJO"),
    	  @JoinColumn(name = "ID_PUESTO_TRABAJO", referencedColumnName = "ID_PUESTO_TRABAJO")
    	})
    private TurnosDeTrabajoEntity turnosDeTrabajo;

    @OneToMany(mappedBy="empleados", targetEntity=VacacionesEntity.class)
    private List<VacacionesEntity> listOfVacaciones;

    @OneToOne(mappedBy="administrador", targetEntity=CentrosDeTrabajoEntity.class)
    private CentrosDeTrabajoEntity listOfCentrosDeTrabajo;

    @OneToOne(mappedBy="empleados", targetEntity=PuestoDeTrabajoEntity.class)
    private PuestoDeTrabajoEntity listOfPuestoDeTrabajo;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public EmpleadosEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setIdempleados( Integer idempleados ) {
        this.idempleados = idempleados ;
    }
    public Integer getIdempleados() {
        return this.idempleados;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : NOMBRE ( VARCHAR ) 
    public void setNombre( String nombre ) {
        this.nombre = nombre;
    }
    public String getNombre() {
        return this.nombre;
    }

    //--- DATABASE MAPPING : APELLIDO1 ( VARCHAR ) 
    public void setApellido1( String apellido1 ) {
        this.apellido1 = apellido1;
    }
    public String getApellido1() {
        return this.apellido1;
    }

    //--- DATABASE MAPPING : APELLIDO2 ( VARCHAR ) 
    public void setApellido2( String apellido2 ) {
        this.apellido2 = apellido2;
    }
    public String getApellido2() {
        return this.apellido2;
    }

    //--- DATABASE MAPPING : TELEFONO_MOVIL ( VARCHAR ) 
    public void setTelefonoMovil( String telefonoMovil ) {
        this.telefonoMovil = telefonoMovil;
    }
    public String getTelefonoMovil() {
        return this.telefonoMovil;
    }

    //--- DATABASE MAPPING : TELEFONO_FIJO ( VARCHAR ) 
    public void setTelefonoFijo( String telefonoFijo ) {
        this.telefonoFijo = telefonoFijo;
    }
    public String getTelefonoFijo() {
        return this.telefonoFijo;
    }

    //--- DATABASE MAPPING : FECHA_NACIMIENTO ( DATE ) 
    public void setFechaNacimiento( Date fechaNacimiento ) {
        this.fechaNacimiento = fechaNacimiento;
    }
    public Date getFechaNacimiento() {
        return this.fechaNacimiento;
    }

    //--- DATABASE MAPPING : FECHA_INCORPORACION ( DATE ) 
    public void setFechaIncorporacion( Date fechaIncorporacion ) {
        this.fechaIncorporacion = fechaIncorporacion;
    }
    public Date getFechaIncorporacion() {
        return this.fechaIncorporacion;
    }

    //--- DATABASE MAPPING : DNI ( VARCHAR ) 
    public void setDni( String dni ) {
        this.dni = dni;
    }
    public String getDni() {
        return this.dni;
    }

    //--- DATABASE MAPPING : NUM_DIAS_VACACIONES ( INT ) 
    public void setNumDiasVacaciones( Integer numDiasVacaciones ) {
        this.numDiasVacaciones = numDiasVacaciones;
    }
    public Integer getNumDiasVacaciones() {
        return this.numDiasVacaciones;
    }

    //--- DATABASE MAPPING : EMAIL ( VARCHAR ) 
    public void setEmail( String email ) {
        this.email = email;
    }
    public String getEmail() {
        return this.email;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfPlanillas( List<PlanillasEntity> listOfPlanillas ) {
        this.listOfPlanillas = listOfPlanillas;
    }
    public List<PlanillasEntity> getListOfPlanillas() {
        return this.listOfPlanillas;
    }

    public void setUsuarios( UsuariosEntity usuarios ) {
        this.usuarios = usuarios;
    }
    public UsuariosEntity getUsuarios() {
        return this.usuarios;
    }

    public void setListOfTurnosTrabajoEspeciales( List<TurnosTrabajoEspecialesEntity> listOfTurnosTrabajoEspeciales ) {
        this.listOfTurnosTrabajoEspeciales = listOfTurnosTrabajoEspeciales;
    }
    public List<TurnosTrabajoEspecialesEntity> getListOfTurnosTrabajoEspeciales() {
        return this.listOfTurnosTrabajoEspeciales;
    }

    public void setListOfDiasFestivosPendientes( List<DiasFestivosPendientesEntity> listOfDiasFestivosPendientes ) {
        this.listOfDiasFestivosPendientes = listOfDiasFestivosPendientes;
    }
    public List<DiasFestivosPendientesEntity> getListOfDiasFestivosPendientes() {
        return this.listOfDiasFestivosPendientes;
    }

    public void setDireccion( DireccionEntity direccion ) {
        this.direccion = direccion;
    }
    public DireccionEntity getDireccion() {
        return this.direccion;
    }

    public void setPerfiles( PerfilesEntity perfiles ) {
        this.perfiles = perfiles;
    }
    public PerfilesEntity getPerfiles() {
        return this.perfiles;
    }

    public void setTurnosDeTrabajo( TurnosDeTrabajoEntity turnosDeTrabajo ) {
        this.turnosDeTrabajo = turnosDeTrabajo;
    }
    public TurnosDeTrabajoEntity getTurnosDeTrabajo() {
        return this.turnosDeTrabajo;
    }

    public void setListOfVacaciones( List<VacacionesEntity> listOfVacaciones ) {
        this.listOfVacaciones = listOfVacaciones;
    }
    public List<VacacionesEntity> getListOfVacaciones() {
        return this.listOfVacaciones;
    }

    public void setListOfCentrosDeTrabajo( CentrosDeTrabajoEntity listOfCentrosDeTrabajo ) {
        this.listOfCentrosDeTrabajo = listOfCentrosDeTrabajo;
    }
    public CentrosDeTrabajoEntity getListOfCentrosDeTrabajo() {
        return this.listOfCentrosDeTrabajo;
    }

    public void setListOfPuestoDeTrabajo( PuestoDeTrabajoEntity listOfPuestoDeTrabajo ) {
        this.listOfPuestoDeTrabajo = listOfPuestoDeTrabajo;
    }
    public PuestoDeTrabajoEntity getListOfPuestoDeTrabajo() {
        return this.listOfPuestoDeTrabajo;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(idempleados);
        sb.append("]:"); 
        sb.append(nombre);
        sb.append("|");
        sb.append(apellido1);
        sb.append("|");
        sb.append(apellido2);
        sb.append("|");
        sb.append(telefonoMovil);
        sb.append("|");
        sb.append(telefonoFijo);
        sb.append("|");
        sb.append(fechaNacimiento);
        sb.append("|");
        sb.append(fechaIncorporacion);
        sb.append("|");
        sb.append(dni);
        sb.append("|");
        sb.append(numDiasVacaciones);
        sb.append("|");
        sb.append(email);
        return sb.toString(); 
    } 

}
